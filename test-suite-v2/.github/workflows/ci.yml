name: Test Suite v2 CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'test-suite-v2/**'
      - 'src/**'
      - 'tests/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'test-suite-v2/**'
      - 'src/**'
      - 'tests/**'

env:
  NODE_VERSION: '18'
  TEST_BASE_URL: 'http://localhost:3000'
  TEST_API_URL: 'http://localhost:3000/api'
  TEST_COVERAGE_ENABLED: 'true'
  TEST_REPORTING_ENABLED: 'true'
  TEST_PARALLEL_ENABLED: 'true'
  TEST_PARALLEL_WORKERS: '4'

jobs:
  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'test-suite-v2/package-lock.json'

    - name: Install dependencies
      run: |
        cd test-suite-v2
        npm ci

    - name: Type checking
      run: |
        cd test-suite-v2
        npm run type-check

    - name: Lint code
      run: |
        cd test-suite-v2
        npm run lint

    - name: Run unit tests
      run: |
        cd test-suite-v2
        npm run test:unit

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./test-suite-v2/coverage/lcov.info
        flags: unit-tests
        name: Unit Tests Coverage
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          test-suite-v2/reports/
          test-suite-v2/coverage/

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'test-suite-v2/package-lock.json'

    - name: Install dependencies
      run: |
        cd test-suite-v2
        npm ci

    - name: Setup test database
      run: |
        cd test-suite-v2
        npm run setup
        # Warte auf Datenbank
        sleep 10

    - name: Run integration tests
      run: |
        cd test-suite-v2
        npm run test:integration
      env:
        TEST_DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./test-suite-v2/coverage/lcov.info
        flags: integration-tests
        name: Integration Tests Coverage
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          test-suite-v2/reports/
          test-suite-v2/coverage/

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'test-suite-v2/package-lock.json'

    - name: Install dependencies
      run: |
        cd test-suite-v2
        npm ci

    - name: Install Playwright browsers
      run: |
        cd test-suite-v2
        npx playwright install --with-deps

    - name: Build application
      run: npm run build

    - name: Start application
      run: |
        npm run dev &
        # Warte auf Anwendung
        timeout 60 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 2; done'

    - name: Run E2E tests
      run: |
        cd test-suite-v2
        npm run test:e2e
      env:
        BASE_URL: http://localhost:3000

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          test-suite-v2/reports/playwright-results/
          test-suite-v2/reports/playwright-html-report/

    - name: Upload screenshots on failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-screenshots
        path: test-suite-v2/reports/playwright-snapshots/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'test-suite-v2/package-lock.json'

    - name: Install dependencies
      run: |
        cd test-suite-v2
        npm ci

    - name: Build application
      run: npm run build

    - name: Start application
      run: |
        npm run dev &
        timeout 60 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 2; done'

    - name: Run performance tests
      run: |
        cd test-suite-v2
        npm run test:performance
      env:
        TEST_PERFORMANCE_ENABLED: 'true'
        TEST_LOAD_TEST_USERS: '1000'
        TEST_CONCURRENT_SESSIONS: '50'

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: test-suite-v2/reports/performance/

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'test-suite-v2/package-lock.json'

    - name: Install dependencies
      run: |
        cd test-suite-v2
        npm ci

    - name: Run security tests
      run: |
        cd test-suite-v2
        npm run test:security

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-results
        path: test-suite-v2/reports/security/

  # Generate Reports
  generate-reports:
    name: Generate Test Reports
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, security-tests]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'test-suite-v2/package-lock.json'

    - name: Install dependencies
      run: |
        cd test-suite-v2
        npm ci

    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        path: ./test-suite-v2/reports/

    - name: Generate consolidated reports
      run: |
        cd test-suite-v2
        npm run report:generate

    - name: Upload final reports
      uses: actions/upload-artifact@v3
      with:
        name: consolidated-test-reports
        path: |
          test-suite-v2/reports/
        retention-days: 30

  # Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, generate-reports]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download consolidated reports
      uses: actions/download-artifact@v3
      with:
        name: consolidated-test-reports
        path: ./reports/

    - name: Check test results
      run: |
        # Überprüfe, ob alle Tests bestanden sind
        if [ ! -f "./reports/test-summary-*.md" ]; then
          echo "❌ Test-Bericht nicht gefunden"
          exit 1
        fi

        # Lese Erfolgsrate aus Bericht
        SUCCESS_RATE=$(grep "Erfolgsrate" ./reports/test-summary-*.md | grep -o "[0-9]\+\.[0-9]\+" | head -1)

        echo "📊 Erfolgsrate: ${SUCCESS_RATE}%"

        # Quality Gate: Mindestens 80% Erfolgsrate
        if (( $(echo "$SUCCESS_RATE < 80" | bc -l) )); then
          echo "❌ Quality Gate fehlgeschlagen: Erfolgsrate unter 80%"
          exit 1
        fi

        echo "✅ Quality Gate bestanden"

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          // Lese Test-Bericht
          const reportsDir = './reports';
          const summaryFile = fs.readdirSync(reportsDir).find(file => file.startsWith('test-summary-'));

          if (summaryFile) {
            const summaryContent = fs.readFileSync(path.join(reportsDir, summaryFile), 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🧪 Test-Ergebnisse

${summaryContent}

### 📊 Zusammenfassung
- ✅ Unit Tests: ${{ needs.unit-tests.result }}
- ✅ Integration Tests: ${{ needs.integration-tests.result }}
- ✅ E2E Tests: ${{ needs.e2e-tests.result }}
- ✅ Performance Tests: ${{ needs.performance-tests.result }}
- ✅ Security Tests: ${{ needs.security-tests.result }}

[📋 Vollständiger Bericht](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`
            });
          }

  # Deploy to staging (nur bei main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/main' && needs.quality-gate.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "🚀 Deploy zu Staging-Umgebung"
        # Hier würden die eigentlichen Deploy-Schritte stehen
        # z.B. Docker build, push zu Registry, Kubernetes deployment, etc.

    - name: Run smoke tests on staging
      run: |
        echo "🧪 Führe Smoke-Tests auf Staging aus"
        # Hier würden Smoke-Tests gegen die Staging-Umgebung laufen

    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Staging-Deployment erfolgreich"
        # Hier könnte eine Benachrichtigung erfolgen (Slack, Teams, etc.)

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Staging-Deployment fehlgeschlagen"
        # Hier könnte eine Benachrichtigung über den Fehler erfolgen