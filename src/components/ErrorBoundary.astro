---
// ErrorBoundary.astro
// A client-side error boundary component for Astro

interface Props {
  fallback?: any;
  client?: 'load' | 'idle' | 'visible' | 'media' | 'only';
}

const { fallback, client = 'load' } = Astro.props;

// This will be rendered on the server
---

<Fragment>
  <div id="error-boundary-root">
    <slot />
  </div>
  
  <div id="error-boundary-fallback" class="hidden">
    {fallback || (
      <div class="rounded-md bg-red-50 p-4 dark:bg-red-900/20">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-red-800 dark:text-red-200">
              Ein Fehler ist aufgetreten
            </h3>
            <div class="mt-2 text-sm text-red-700 dark:text-red-300">
              <p>Diese Komponente konnte nicht geladen werden. Bitte versuchen Sie es sp√§ter erneut oder aktualisieren Sie die Seite.</p>
            </div>
            <div class="mt-4">
              <button 
                onclick="document.getElementById('error-boundary-root').style.display = 'block'; document.getElementById('error-boundary-fallback').classList.add('hidden'); location.reload();"
                class="rounded-md bg-red-50 px-2 py-1.5 text-sm font-medium text-red-800 hover:bg-red-100 focus:outline-none focus:ring-2 focus:ring-red-600 focus:ring-offset-2 focus:ring-offset-red-50 dark:bg-red-900/30 dark:text-red-200 dark:hover:bg-red-900/50"
              >
                Erneut versuchen
              </button>
            </div>
          </div>
        </div>
      </div>
    )}
  </div>
</Fragment>

<script is:inline>
// Client-side error boundary implementation
document.addEventListener('astro:page-load', () => {
  const errorBoundaryRoot = document.getElementById('error-boundary-root');
  const errorBoundaryFallback = document.getElementById('error-boundary-fallback');
  
  if (!errorBoundaryRoot || !errorBoundaryFallback) return;
  
  // Store the original content
  const originalContent = errorBoundaryRoot.innerHTML;
  
  // Error handler for the boundary
  const handleError = (error) => {
    console.error('Error in ErrorBoundary:', error);
    errorBoundaryRoot.style.display = 'none';
    errorBoundaryFallback.classList.remove('hidden');
    
    // Report the error to your error tracking service
    if (typeof window !== 'undefined' && window.Sentry) {
      window.Sentry.captureException(error);
    }
  };
  
  // Add error event listeners
  window.addEventListener('error', (event) => {
    // Only handle errors that originate from within our boundary
    if (event.target !== window && errorBoundaryRoot.contains(event.target)) {
      handleError(event.error || new Error('Unknown error'));
      event.preventDefault();
    }
  });
  
  // Catch unhandled promise rejections
  window.addEventListener('unhandledrejection', (event) => {
    handleError(event.reason || new Error('Unhandled promise rejection'));
    event.preventDefault();
  });
  
  // Reset handler for the retry button
  const resetBoundary = () => {
    errorBoundaryRoot.style.display = 'block';
    errorBoundaryRoot.innerHTML = originalContent;
    errorBoundaryFallback.classList.add('hidden');
  };
  
  const retryButton = errorBoundaryFallback.querySelector('button');
  if (retryButton) {
    retryButton.onclick = () => {
      resetBoundary();
      // Re-run the component's client-side code
      if (typeof window !== 'undefined' && window.Astro) {
        window.Astro.init();
      }
    };
  }
});
</script>
