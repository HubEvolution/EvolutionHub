---
import type { ProcessedBlogPost } from '../content/types';
import BlogCard from './BlogCard.astro';

// Define the shape of the component props
interface Props {
  posts: ProcessedBlogPost[];
  title?: string;
  description?: string;
  showFeatured?: boolean;
  className?: string;
}

// Get and validate props
const { 
  posts = [], 
  title,
  description,
  showFeatured = false,
  className = '' 
} = Astro.props;

// Get featured post if needed
const featuredPost = showFeatured && posts.length > 0 ? posts[0] : null;
const remainingPosts = showFeatured && posts.length > 0 ? posts.slice(1) : posts;
---

<div class:list={['space-y-12', className]}>
  {title && (
    <div class="text-center">
      <h2 class="text-3xl font-bold text-gray-900 dark:text-white sm:text-4xl">
        {title}
      </h2>
      {description && (
        <p class="mx-auto mt-3 max-w-2xl text-xl text-gray-500 dark:text-gray-300 sm:mt-4">
          {description}
        </p>
      )}
    </div>
  )}

  {featuredPost && (
    <div class="mb-12">
      <h3 class="mb-6 text-xl font-semibold text-gray-900 dark:text-white">
        Featured Post
      </h3>
      <BlogCard 
        post={featuredPost} 
        featured={true}
        className="h-full"
      />
    </div>
  )}

  {remainingPosts.length > 0 && (
    <div class="grid gap-12 md:grid-cols-2 lg:grid-cols-3">
      {remainingPosts.map((post) => (
        <BlogCard 
          post={post} 
          className="h-full"
        />
      ))}
    </div>
  )}

  {posts.length === 0 && (
    <div class="rounded-lg bg-gray-50 p-8 text-center dark:bg-gray-800/50">
      <h3 class="text-lg font-medium text-gray-900 dark:text-white">
        Keine Beiträge gefunden
      </h3>
      <p class="mt-2 text-gray-600 dark:text-gray-300">
        Es wurden keine Blog-Beiträge gefunden, die den Suchkriterien entsprechen.
      </p>
    </div>
  )}
</div>
