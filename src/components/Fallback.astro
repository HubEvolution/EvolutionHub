---
// Fallback.astro
// A component to show loading states and fallback UIs

interface Props {
  type?: 'spinner' | 'skeleton' | 'message' | 'card' | 'list';
  message?: string;
  count?: number;
  className?: string;
}

const { 
  type = 'spinner',
  message = 'Wird geladen...',
  count = 1,
  className = '' 
} = Astro.props as Props;
---

{type === 'spinner' && (
  <div class={`flex items-center justify-center p-8 ${className}`}>
    <div class="flex flex-col items-center">
      <svg class="animate-spin h-8 w-8 text-emerald-600 dark:text-emerald-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <p class="mt-2 text-sm text-gray-600 dark:text-gray-300">{message}</p>
    </div>
  </div>
)}

{type === 'skeleton' && (
  <div class={`animate-pulse space-y-4 ${className}`}>
    {Array.from({ length: count }).map(() => (
      <div class="space-y-3">
        <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
        <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded"></div>
        <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-5/6"></div>
      </div>
    ))}
  </div>
)}

{type === 'message' && (
  <div class={`p-4 text-center ${className}`}>
    <p class="text-gray-600 dark:text-gray-300">{message}</p>
  </div>
)}

{type === 'card' && (
  <div class={`grid gap-6 sm:grid-cols-2 lg:grid-cols-3 ${className}`}>
    {Array.from({ length: count }).map(() => (
      <div class="overflow-hidden rounded-lg bg-white dark:bg-gray-800 shadow hover:shadow-md transition-shadow duration-200">
        <div class="h-48 bg-gray-200 dark:bg-gray-700 animate-pulse"></div>
        <div class="p-6">
          <div class="h-6 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-4 animate-pulse"></div>
          <div class="space-y-2">
            <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-full"></div>
            <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-5/6"></div>
            <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-4/6"></div>
          </div>
          <div class="mt-6 pt-4 border-t border-gray-100 dark:border-gray-700">
            <div class="flex items-center justify-between">
              <div class="h-3 w-20 bg-gray-200 dark:bg-gray-700 rounded"></div>
              <div class="h-3 w-16 bg-gray-200 dark:bg-gray-700 rounded"></div>
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>
)}

{type === 'list' && (
  <div class={`space-y-4 ${className}`}>
    {Array.from({ length: count }).map(() => (
      <div class="p-4 border border-gray-200 dark:border-gray-700 rounded-lg">
        <div class="flex space-x-3">
          <div class="flex-shrink-0">
            <div class="h-10 w-10 rounded-full bg-gray-200 dark:bg-gray-700 animate-pulse"></div>
          </div>
          <div class="min-w-0 flex-1">
            <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-2 animate-pulse"></div>
            <div class="space-y-1">
              <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
              <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-5/6"></div>
            </div>
            <div class="mt-2 flex space-x-2">
              <div class="h-5 w-16 bg-gray-200 dark:bg-gray-700 rounded-full animate-pulse"></div>
              <div class="h-5 w-20 bg-gray-200 dark:bg-gray-700 rounded-full animate-pulse"></div>
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>
)}

<style>
  @keyframes shimmer {
    0% { background-position: -1000px 0; }
    100% { background-position: 1000px 0; }
  }
  
  .shimmer {
    background: linear-gradient(90deg, 
      rgba(243, 244, 246, 0.5) 25%, 
      rgba(229, 231, 235, 0.8) 50%, 
      rgba(243, 244, 246, 0.5) 75%);
    background-size: 1000px 100%;
    animation: shimmer 2s infinite linear;
  }
  
  .dark .shimmer {
    background: linear-gradient(90deg, 
      rgba(31, 41, 55, 0.5) 25%, 
      rgba(55, 65, 81, 0.8) 50%, 
      rgba(31, 41, 55, 0.5) 75%);
    background-size: 1000px 100%;
  }
</style>
