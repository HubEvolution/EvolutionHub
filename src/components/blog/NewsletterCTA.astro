---
// Newsletter CTA for Blog Articles
interface Props {
  variant?: 'inline' | 'card' | 'banner';
  position?: 'top' | 'middle' | 'bottom';
  title?: string;
  description?: string;
  incentive?: string; // Special offer or incentive text
  showBenefits?: boolean;
}

import { getLocale } from '@/lib/i18n';
import { getI18n } from '@/utils/i18n';

const { 
  variant = 'card',
  position = 'bottom',
  title,
  description,
  incentive,
  showBenefits = false
} = Astro.props;

// Localized strings for client-side alerts and form texts (minimal subset)
const locale = getLocale(Astro.url.pathname);
const t = getI18n(locale);
const i18nNewsletter = {
  forms: {
    email_placeholder: t('common.forms.email_placeholder'),
  },
  actions: {
    subscribe: t('common.actions.subscribe'),
  },
  status: {
    sending: t('common.status.sending'),
  },
  success: {
    newsletter_confirmation_sent: t('common.success.newsletter_confirmation_sent'),
  },
  errors: {
    generic: t('common.errors.generic'),
  },
};

// Default content based on position and context
const defaultContent = {
  title: title || (
    position === 'top' 
      ? 'Bleiben Sie informiert!' 
      : position === 'middle'
      ? 'Gef√§llt Ihnen dieser Artikel?'
      : 'Verpassen Sie keine Updates!'
  ),
  description: description || (
    position === 'top'
      ? 'Erhalten Sie die neuesten Insights direkt in Ihr Postfach.'
      : position === 'middle'
      ? 'Dann abonnieren Sie unseren Newsletter f√ºr mehr solcher Inhalte.'
      : 'Abonnieren Sie unseren Newsletter f√ºr regelm√§√üige Insights und Tipps.'
  )
};

const benefits = [
  'üöÄ Neueste Trends und Best Practices',
  'üí° Exklusive Tipps und Strategien',
  'üìö Kostenlose Resources und Guides',
  'üéØ Praxisnahe Case Studies'
];

const isCard = variant === 'card';
const isInline = variant === 'inline';
const isBanner = variant === 'banner';
---

<div class={`newsletter-cta ${variant} ${position} not-prose my-8`}>
  <!-- Page-scoped i18n for this CTA instance -->
  <script type="application/json" data-role="i18n-newsletter-cta">{JSON.stringify(i18nNewsletter)}</script>
  {isCard && (
    <div class="bg-gradient-to-br from-emerald-50 to-cyan-50 dark:from-emerald-900/20 dark:to-cyan-900/20 border border-emerald-200 dark:border-emerald-800 rounded-xl p-6 text-center">
      <div class="max-w-md mx-auto">
        <!-- Icon -->
        <div class="w-12 h-12 bg-gradient-to-r from-emerald-500 to-cyan-500 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
          </svg>
        </div>
        
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">
          {defaultContent.title}
        </h3>
        
        <p class="text-sm text-gray-600 dark:text-gray-300 mb-4">
          {defaultContent.description}
        </p>
        
        {incentive && (
          <div class="bg-emerald-100 dark:bg-emerald-900/30 border border-emerald-300 dark:border-emerald-700 rounded-lg p-3 mb-4">
            <p class="text-sm font-medium text-emerald-800 dark:text-emerald-200">
              üéÅ {incentive}
            </p>
          </div>
        )}
        
        {showBenefits && (
          <div class="text-left mb-4">
            <p class="text-xs font-medium text-gray-500 dark:text-gray-400 mb-2">Sie erhalten:</p>
            <div class="grid grid-cols-1 gap-1">
              {benefits.map(benefit => (
                <p class="text-xs text-gray-600 dark:text-gray-300">{benefit}</p>
              ))}
            </div>
          </div>
        )}
        
        <!-- Newsletter Form (Compact) -->
        <div class="newsletter-form-container">
          <!-- This will be dynamically replaced with Newsletter component -->
        </div>
      </div>
    </div>
  )}
  
  {isBanner && (
    <div class="bg-gradient-to-r from-emerald-500 to-cyan-500 text-white rounded-lg p-4 text-center">
      <div class="max-w-2xl mx-auto flex flex-col sm:flex-row items-center gap-4">
        <div class="flex-1 text-left">
          <h3 class="font-semibold text-lg mb-1">{defaultContent.title}</h3>
          <p class="text-emerald-100 text-sm">{defaultContent.description}</p>
          {incentive && <p class="text-xs font-medium text-emerald-200 mt-1">üéÅ {incentive}</p>}
        </div>
        
        <div class="newsletter-form-container flex-shrink-0">
          <!-- Newsletter form will be inserted here -->
        </div>
      </div>
    </div>
  )}
  
  {isInline && (
    <div class="border-l-4 border-emerald-500 bg-emerald-50 dark:bg-emerald-900/20 p-4 rounded-r-lg">
      <div class="flex items-start gap-3">
        <div class="w-8 h-8 bg-emerald-500 rounded-full flex items-center justify-center flex-shrink-0">
          <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
          </svg>
        </div>
        
        <div class="flex-1 min-w-0">
          <h4 class="font-medium text-emerald-900 dark:text-emerald-100 text-sm mb-1">
            {defaultContent.title}
          </h4>
          <p class="text-emerald-700 dark:text-emerald-300 text-xs mb-3">
            {defaultContent.description}
          </p>
          
          <div class="newsletter-form-container">
            <!-- Newsletter form will be inserted here -->
          </div>
        </div>
      </div>
    </div>
  )}
</div>

<script>
  import { trackNewsletterSignup } from '@/lib/analytics';
  
  // Newsletter CTA functionality
  document.addEventListener('DOMContentLoaded', () => {
    const ctaElements = document.querySelectorAll('.newsletter-cta');
    
    ctaElements.forEach((cta) => {
      const variant = Array.from(cta.classList).find(cls => 
        ['card', 'banner', 'inline'].includes(cls)
      ) || 'card';
      const position = Array.from(cta.classList).find(cls => 
        ['top', 'middle', 'bottom'].includes(cls)
      ) || 'bottom';
      
      // Read localized messages for this CTA
      const i18nEl = cta.querySelector('script[data-role="i18n-newsletter-cta"]');
      const I18N = i18nEl ? JSON.parse(i18nEl.textContent || '{}') : {};

      // Create and insert newsletter form
      const formContainer = cta.querySelector('.newsletter-form-container');
      if (formContainer) {
        // Create a compact newsletter form
        const compactVariant = variant === 'banner' ? 'inline' : 'compact';
        const source = `blog_newsletter_cta_${position}`;
        
        // Insert Newsletter component dynamically
        insertNewsletterForm(formContainer, compactVariant, source, I18N);
        
        // Track CTA view
        console.log(`[Analytics] Newsletter CTA view: ${variant} ${position} ${source}`);
      }
    });
  });
  
  function insertNewsletterForm(container: Element, variant: string, source: string, I18N: any) {
    // Create newsletter form HTML (simplified version of Newsletter component)
    const formHTML = `
      <form id="newsletter-cta-form-${source}" class="newsletter-cta-form flex gap-2 max-w-sm mx-auto" data-source="${source}">
        <input 
          type="email" 
          placeholder="${I18N.forms?.email_placeholder || 'Email address'}" 
          required
          class="flex-1 px-3 py-2 text-sm border border-white/30 rounded-lg bg-white/10 text-white placeholder-white/70 focus:outline-none focus:ring-2 focus:ring-white/50"
        />
        <button 
          type="submit"
          class="px-4 py-2 bg-white text-emerald-600 font-medium text-sm rounded-lg hover:bg-emerald-50 focus:outline-none focus:ring-2 focus:ring-white/50 transition-colors duration-300"
        >
          ${I18N.actions?.subscribe || 'Subscribe'}
        </button>
      </form>
    `;
    
    container.innerHTML = formHTML;
    
    // Add form submission handler
    const form = container.querySelector('form');
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const emailInput = form.querySelector('input[type="email"]') as HTMLInputElement;
        const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
        const email = emailInput?.value.trim();
        
        if (!email) return;
        
        // Set loading state
        const originalText = submitButton.textContent;
        submitButton.textContent = I18N.status?.sending || 'Sending...';
        submitButton.disabled = true;
        
        try {
          // Submit to newsletter API
          const response = await fetch('/api/newsletter/subscribe', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              email: email,
              consent: true,
              source: source
            })
          });
          
          const result = await response.json();
          
          if (result.success) {
            // Replace form with success message
            container.innerHTML = `
              <div class="text-center p-3 bg-white/10 rounded-lg">
                <svg class="w-5 h-5 text-white mx-auto mb-1" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                <p class="text-xs text-white/90">${I18N.success?.newsletter_confirmation_sent || 'Confirmation email sent!'}</p>
              </div>
            `;
            
            // Track success
            trackNewsletterSignup(source);
          } else {
            throw new Error(result.message || 'Subscription failed');
          }
        } catch (error) {
          console.error('Newsletter CTA subscription error:', error);
          
          // Reset button
          submitButton.textContent = originalText;
          submitButton.disabled = false;
          
          // Show error (could be enhanced with proper error UI)
          alert(I18N.errors?.generic || 'An error occurred. Please try again later.');
          
          // Track error
          console.log(`[Analytics] Newsletter CTA error: ${error instanceof Error ? error.message : 'unknown'}`);
        }
      });
    }
  }
</script>

<style>
  .newsletter-cta.banner .newsletter-cta-form input {
    @apply bg-white/20 border-white/30 text-white placeholder-white/70;
  }
  
  .newsletter-cta.banner .newsletter-cta-form input:focus {
    @apply ring-white/50;
  }
  
  .newsletter-cta.card .newsletter-cta-form,
  .newsletter-cta.inline .newsletter-cta-form {
    @apply max-w-xs;
  }
  
  .newsletter-cta.card .newsletter-cta-form input,
  .newsletter-cta.inline .newsletter-cta-form input {
    @apply bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white placeholder-gray-500;
  }
  
  .newsletter-cta.card .newsletter-cta-form button,
  .newsletter-cta.inline .newsletter-cta-form button {
    @apply bg-gradient-to-r from-emerald-500 to-cyan-500 text-white hover:from-emerald-600 hover:to-cyan-600;
  }
</style>
