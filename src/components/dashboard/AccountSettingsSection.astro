---
import DeleteAccountSection from '@/components/account/DeleteAccountSection';
import SettingsScript from '@/components/SettingsScript.astro';

interface ProfileCopy {
  title: string;
  description: string;
  nameLabel: string;
  usernameLabel: string;
  emailLabel: string;
  changeEmailHint: string;
  changeEmailCta: string;
  saveCta: string;
  hybridTitle: string;
  hybridDescription: string;
  supportTitle: string;
  supportDescription: string;
  supportCta: string;
  supportHref: string;
}

interface Props {
  user: {
    id: string;
    name: string;
    username: string;
    email: string;
    image?: string;
  };
  planLabels: Record<'free' | 'pro' | 'premium' | 'enterprise', string>;
  billingUrl: string;
  redirectUrl: string;
  dangerStrings: {
    title: string;
    description: string;
    button: string;
    close: string;
    confirm: {
      title: string;
      description: string;
      confirmCta: string;
      cancelCta: string;
    };
    subscription: {
      title: string;
      description: string;
      periodEnd: string;
      indefinite: string;
      goToBilling: string;
      deleteAnyway: string;
      back: string;
    };
    messages: {
      processing: string;
      success: string;
      error: string;
    };
  };
  profileCopy: ProfileCopy;
  i18nSettings: Record<string, unknown>;
}

const { user, planLabels, billingUrl, redirectUrl, dangerStrings, profileCopy, i18nSettings } = Astro.props;
---

<section id="account-settings" class="space-y-4">
  <div class="grid gap-4 lg:gap-6">
    <div class="space-y-4">
      <div class="group relative overflow-hidden rounded-xl border border-violet-500/20 bg-gradient-to-br from-violet-950/30 via-indigo-950/40 to-fuchsia-950/20 p-5 shadow-xl backdrop-blur-sm transition-all hover:border-violet-400/30 hover:shadow-violet-500/20">
        <div class="absolute inset-0 -z-10 bg-gradient-to-br from-violet-500/10 via-indigo-500/5 to-cyan-500/10 opacity-60 blur-2xl"></div>
        <div class="relative">
          <div class="flex items-start justify-between gap-3">
            <div>
              <h3 class="text-base font-bold text-white">{profileCopy.title}</h3>
              <p class="mt-1 text-sm text-slate-300/90">{profileCopy.description}</p>
            </div>
            <span class="inline-flex items-center rounded-full border border-emerald-400/30 bg-emerald-500/10 px-2.5 py-0.5 text-xs font-bold uppercase tracking-wider text-emerald-300">
              Live
            </span>
          </div>
          <form id="profile-form" method="post" class="mt-5 space-y-4">
            <div class="flex items-center gap-4">
              <img id="avatar-preview" src={user.image || '/assets/svg/logo.svg'} alt="Avatar" class="h-16 w-16 rounded-full border-2 border-violet-400/40 ring-4 ring-violet-500/10">
              <input type="file" id="avatar-upload" name="avatar" class="hidden" accept="image/*">
              <button type="button" id="change-avatar-btn" class="rounded-lg border border-violet-400/30 bg-violet-500/10 px-3 py-1.5 text-sm font-medium text-violet-200 transition hover:border-violet-300/50 hover:bg-violet-500/20">
                Change Picture
              </button>
            </div>

            <div>
              <label for="name" class="mb-1 block text-xs font-semibold uppercase tracking-wide text-violet-200/80">
                {profileCopy.nameLabel}
              </label>
              <input
                type="text"
                id="name"
                name="name"
                value={user.name}
                class="w-full rounded-lg border border-white/10 bg-white/5 px-3 py-2 text-sm text-white shadow-sm backdrop-blur-sm transition focus:border-violet-400/50 focus:outline-none focus:ring-2 focus:ring-violet-500/30"
              >
            </div>

            <div>
              <label for="username" class="mb-1 block text-xs font-semibold uppercase tracking-wide text-violet-200/80">
                {profileCopy.usernameLabel}
              </label>
              <input
                type="text"
                id="username"
                name="username"
                value={user.username}
                class="w-full rounded-lg border border-white/10 bg-white/5 px-3 py-2 text-sm text-white shadow-sm backdrop-blur-sm transition focus:border-violet-400/50 focus:outline-none focus:ring-2 focus:ring-violet-500/30"
              >
            </div>

            <div>
              <label for="email" class="mb-1 block text-xs font-semibold uppercase tracking-wide text-violet-200/80">
                {profileCopy.emailLabel}
              </label>
              <input
                type="email"
                id="email"
                name="email"
                value={user.email}
                class="w-full rounded-lg border border-white/10 bg-slate-900/40 px-3 py-2 text-sm text-slate-400 shadow-inner backdrop-blur-sm focus:outline-none"
                readonly
              >
              <p class="mt-1 text-xs text-slate-400/80">
                {profileCopy.changeEmailHint}
              </p>
              <div class="mt-2">
                <button
                  type="button"
                  class="cursor-not-allowed rounded-lg border border-white/10 bg-slate-900/30 px-3 py-1 text-xs text-slate-500 opacity-60 backdrop-blur-sm"
                  title={profileCopy.changeEmailHint}
                  disabled
                >
                  {profileCopy.changeEmailCta}
                </button>
              </div>
            </div>

            <button type="submit" class="inline-flex items-center justify-center rounded-lg bg-gradient-to-r from-violet-500 to-fuchsia-500 px-5 py-2 text-sm font-bold text-white shadow-lg shadow-violet-500/40 transition hover:from-violet-600 hover:to-fuchsia-600 hover:shadow-violet-500/60">
              {profileCopy.saveCta}
            </button>
          </form>
        </div>
      </div>

      <div class="grid gap-3 sm:grid-cols-2">
        <div class="group relative overflow-hidden rounded-lg border border-indigo-500/20 bg-gradient-to-br from-indigo-950/40 via-cyan-950/30 to-blue-950/40 p-4 backdrop-blur-sm transition-all hover:border-indigo-400/30">
          <div class="absolute inset-0 -z-10 bg-gradient-to-br from-indigo-500/10 to-cyan-500/10 opacity-50"></div>
          <h4 class="text-xs font-bold uppercase tracking-wider text-indigo-200">
            {profileCopy.hybridTitle}
          </h4>
          <p class="mt-1.5 text-sm leading-relaxed text-slate-300/90">{profileCopy.hybridDescription}</p>
        </div>
        <a
          href={profileCopy.supportHref}
          class="group relative overflow-hidden rounded-lg border border-cyan-500/20 bg-gradient-to-br from-slate-950/80 via-cyan-950/40 to-slate-900/80 p-4 shadow-lg backdrop-blur-sm transition-all hover:border-cyan-400/40 hover:shadow-cyan-500/20"
        >
          <div class="relative">
            <h4 class="text-xs font-bold uppercase tracking-wider text-cyan-200">
              {profileCopy.supportTitle}
            </h4>
            <p class="mt-1.5 text-sm leading-relaxed text-slate-300/90">{profileCopy.supportDescription}</p>
            <span class="mt-3 inline-flex items-center gap-1.5 text-sm font-semibold text-cyan-300 transition group-hover:text-cyan-200">
              {profileCopy.supportCta}
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.25 6.75L6.75 17.25M17.25 6.75H8.25M17.25 6.75V15.75" />
              </svg>
            </span>
          </div>
        </a>
      </div>
    </div>

    <DeleteAccountSection
      strings={dangerStrings}
      planLabels={planLabels}
      billingUrl={billingUrl}
      redirectUrl={redirectUrl}
      className="w-full"
    />
  </div>

  <SettingsScript />
  <script is:inline type="application/json" id="i18n-settings">{JSON.stringify(i18nSettings)}</script>

  <div id="avatar-modal" class="fixed inset-0 bg-black/50 items-center justify-center z-50 hidden" style="display: none;">
    <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-semibold text-gray-800 dark:text-white">Change profile picture</h3>
        <button id="close-avatar-modal" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <div id="upload-zone" class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-8 mb-4 text-center cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 transition">
        <div class="flex flex-col items-center justify-center space-y-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <p class="text-sm text-gray-600 dark:text-gray-300">Drag & drop or</p>
          <button id="select-file-btn" class="px-4 py-2 text-sm font-medium bg-primary text-white rounded-lg hover:bg-primary-dark">Choose file</button>
          <p class="text-xs text-gray-500 dark:text-gray-400 mt-2">Supported formats: JPG, PNG, GIF (max. 2MB)</p>
        </div>
      </div>

      <div id="preview-container" class="hidden">
        <div class="flex flex-col items-center space-y-4">
          <img id="modal-preview" class="w-32 h-32 rounded-full object-cover border-4 border-primary" src="" alt="Avatar preview">
          <div class="flex space-x-2">
            <button id="change-selection-btn" class="px-4 py-2 text-sm font-medium border rounded-lg dark:border-gray-600">Change</button>
            <button id="upload-btn" class="px-4 py-2 text-sm font-medium bg-primary text-white rounded-lg hover:bg-primary-dark">Upload</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script is:inline>
    const i18nEl = document.getElementById('i18n-settings');
    const I18N = i18nEl ? JSON.parse(i18nEl.textContent || '{}') : {};
    const modal = document.getElementById('avatar-modal');
    const openModalBtn = document.getElementById('change-avatar-btn');
    const closeModalBtn = document.getElementById('close-avatar-modal');
    const fileInput = document.getElementById('avatar-upload');
    const uploadZone = document.getElementById('upload-zone');
    const selectFileBtn = document.getElementById('select-file-btn');
    const previewContainer = document.getElementById('preview-container');
    const modalPreview = document.getElementById('modal-preview');
    const changeSelectionBtn = document.getElementById('change-selection-btn');
    const uploadBtn = document.getElementById('upload-btn');
    const avatarPreview = document.getElementById('avatar-preview');

    if (openModalBtn && modal) {
      openModalBtn.addEventListener('click', () => {
        modal.classList.remove('hidden');
        modal.style.display = 'flex';
        document.body.classList.add('overflow-hidden');
      });
    }

    if (closeModalBtn && modal) {
      closeModalBtn.addEventListener('click', () => {
        modal.classList.add('hidden');
        modal.style.display = 'none';
        document.body.classList.remove('overflow-hidden');
      });
    }

    if (modal) {
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.classList.add('hidden');
          modal.style.display = 'none';
          document.body.classList.remove('overflow-hidden');
        }
      });
    }

    if (uploadZone) {
      const resetHighlight = () => uploadZone.classList.remove('border-primary');
      uploadZone.addEventListener('click', () => fileInput?.click());
      uploadZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadZone.classList.add('border-primary');
      });
      uploadZone.addEventListener('dragleave', resetHighlight);
      uploadZone.addEventListener('drop', (e) => {
        e.preventDefault();
        resetHighlight();
        if (e.dataTransfer?.files?.length) {
          handleFileSelect(e.dataTransfer.files[0]);
        }
      });
    }

    selectFileBtn?.addEventListener('click', (e) => {
      e.stopPropagation();
      fileInput?.click();
    });

    fileInput?.addEventListener('change', () => {
      if (fileInput.files?.length) {
        handleFileSelect(fileInput.files[0]);
      }
    });

    changeSelectionBtn?.addEventListener('click', () => {
      if (uploadZone && previewContainer && fileInput) {
        uploadZone.classList.remove('hidden');
        previewContainer.classList.add('hidden');
        fileInput.value = '';
      }
    });

    uploadBtn?.addEventListener('click', () => {
      if (fileInput?.files?.length) {
        uploadAvatar(fileInput.files[0]);
      }
    });

    function showPreview() {
      if (uploadZone && previewContainer) {
        uploadZone.classList.add('hidden');
        previewContainer.classList.remove('hidden');
      }
    }

    function showUploadZone() {
      if (uploadZone && previewContainer && fileInput) {
        uploadZone.classList.remove('hidden');
        previewContainer.classList.add('hidden');
        fileInput.value = '';
      }
    }

    function handleFileSelect(file) {
      const validTypes = ['image/jpeg', 'image/png', 'image/gif'];
      const maxSize = 2 * 1024 * 1024;

      if (!validTypes.includes(file.type)) {
        alert(I18N.upload?.invalid_type || 'Please choose an image in JPG, PNG, or GIF format');
        return;
      }

      if (file.size > maxSize) {
        alert(I18N.upload?.too_large || 'The file is too large. Maximum size is 2MB');
        return;
      }

      const reader = new FileReader();
      reader.onload = (event) => {
        if (event.target?.result && modalPreview) {
          modalPreview.src = String(event.target.result);
          showPreview();
        }
      };
      reader.readAsDataURL(file);
    }

    async function uploadAvatar(file) {
      if (uploadBtn) {
        uploadBtn.textContent = I18N.status?.uploading || 'Uploading...';
        uploadBtn.disabled = true;
      }

      try {
        const formData = new FormData();
        formData.append('avatar', file);
        const response = await fetch('/api/user/avatar', { method: 'POST', body: formData });
        if (!response.ok) {
          const errorText = await response.text().catch(() => '');
          throw new Error(errorText || 'Upload failed');
        }
        const data = await response.json();
        if (avatarPreview && data?.imageUrl) {
          avatarPreview.src = data.imageUrl;
        }
        if (modal) {
          modal.classList.add('hidden');
          modal.style.display = 'none';
          document.body.classList.remove('overflow-hidden');
        }
        alert(I18N.success?.avatar_updated || 'Profile picture updated successfully!');
      } catch (error) {
        console.error('Upload error:', error);
        const fallback = I18N.errors?.upload_failed_prefix || 'Upload failed:';
        const message = error instanceof Error ? error.message : 'Unknown error';
        alert(`${fallback} ${message}`);
      } finally {
        if (uploadBtn) {
          uploadBtn.textContent = I18N.actions?.upload || 'Upload';
          uploadBtn.disabled = false;
        }
      }
    }

    showUploadZone();
  </script>
</section>
