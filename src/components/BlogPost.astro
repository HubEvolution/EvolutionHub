---
import type { ProcessedBlogPost } from '@/content/types';
import BlogCard from './BlogCard.astro';
import BlogCTA from './blog/BlogCTA.astro';
import LeadMagnetCTA from './blog/LeadMagnetCTA.astro';
import NewsletterCTA from './blog/NewsletterCTA.astro';
// Import the Image component from Astro's built-in assets handling.
// Avoid astro:assets Image on Worker SSR; render native <img>
import type { ImageMetadata } from 'astro';
import { getLocale } from '@/lib/i18n';
import { localizePath } from '@/lib/locale-path';

interface Props {
  post: ProcessedBlogPost;
  relatedPosts?: ProcessedBlogPost[];
  className?: string;
  // CTA-Konfiguration
  showTopCTA?: boolean;
  showBottomCTA?: boolean;
  topCTAConfig?: {
    type: 'newsletter' | 'leadmagnet' | 'consultation' | 'social';
    leadMagnet?: string;
    variant?: 'primary' | 'secondary' | 'subtle';
    title?: string;
    description?: string;
  };
  bottomCTAConfig?: {
    type: 'newsletter' | 'leadmagnet' | 'consultation' | 'social';
    leadMagnet?: string;
    variant?: 'primary' | 'secondary' | 'subtle';
    title?: string;
    description?: string;
  };
}

const {
  post,
  relatedPosts = [],
  className = '',
  showTopCTA = true,
  showBottomCTA = true,
  topCTAConfig,
  bottomCTAConfig,
} = Astro.props;

const {
  title,
  description,
  image,
  imageAlt,
  category,
  tags,
  author,
  // CTA-Konfiguration aus dem Frontmatter
  ctas = [],
} = post.data;

// Normalize category to a safe string for URLs and labels
const categoryStr: string = typeof category === 'string' ? category : 'Allgemein';

const { formattedPubDate, formattedUpdatedDate, readingTime } = post;

// Helper to get author details safely
const authorName =
  typeof author === 'string'
    ? author
    : author && typeof author === 'object' && 'name' in author
      ? String((author as any).name)
      : 'Anonymous';
const authorInitial =
  authorName !== 'Anonymous' && authorName.length > 0 ? authorName.charAt(0) : '?';

// Prepare the URL for sharing the article with a robust origin fallback
// Prefer Astro.site.origin when available; fallback to local dev origin
const siteOrigin = (Astro.site && (Astro.site as URL).origin) || 'http://127.0.0.1:8787';
const postUrlForSharing = encodeURIComponent(new URL(post.url, siteOrigin).href);
const encodedTitle = encodeURIComponent(String(title));

const twitterShareUrl = `https://twitter.com/intent/tweet?text=${encodedTitle.replace(/%20/g, '+')}&url=${postUrlForSharing}`;
const linkedinShareUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${postUrlForSharing}`;
const facebookShareUrl = `https://www.facebook.com/sharer/sharer.php?u=${postUrlForSharing}`;

// Ensure image properties are correctly typed and handled.
const safeImage: ImageMetadata | null =
  image && typeof (image as any)?.src === 'string' ? (image as ImageMetadata) : null;
// Use the width and height from the image data if available, otherwise let Astro handle it.
const imageWidth: number | undefined = safeImage?.width ?? undefined;
const imageHeight: number | undefined = safeImage?.height ?? undefined;
// Normalize alt text string
const imageAltText: string = typeof imageAlt === 'string' ? imageAlt : title;

// Current locale for building localized internal links
const locale = getLocale(Astro.url.pathname);

// CTA-Typen definieren
interface CTAConfig {
  type: 'newsletter' | 'leadmagnet' | 'consultation' | 'social';
  leadMagnet?: string;
  variant?: 'primary' | 'secondary' | 'subtle';
  title?: string;
  description?: string;
  position?: 'top' | 'middle' | 'bottom';
}

// CTA-Konfiguration verarbeiten
const ctaList: CTAConfig[] = Array.isArray(ctas) ? (ctas as CTAConfig[]) : [];
const topCTA = ctaList.find((cta) => cta.position === 'top') || topCTAConfig;
const bottomCTA = ctaList.find((cta) => cta.position === 'bottom') || bottomCTAConfig;

// Map branding variants to LeadMagnetCTA layout variants
const mapLeadMagnetVariant = (
  v?: 'primary' | 'secondary' | 'subtle'
): 'card' | 'inline' | 'banner' | undefined =>
  v === 'primary' ? 'banner' : v === 'secondary' ? 'inline' : v === 'subtle' ? 'card' : undefined;

// Standard-CTA-Konfiguration basierend auf Artikel-Kategorie
const getDefaultCTAForCategory = (category: string, position: 'top' | 'bottom') => {
  const categoryMappings: Record<string, { top: CTAConfig; bottom: CTAConfig }> = {
    'New Work': {
      top: { type: 'leadmagnet', leadMagnet: 'new-work-guide', variant: 'subtle' },
      bottom: { type: 'newsletter', variant: 'primary' },
    },
    Technologie: {
      top: { type: 'leadmagnet', leadMagnet: 'ki-tools-checkliste', variant: 'subtle' },
      bottom: { type: 'newsletter', variant: 'primary' },
    },
    Produktivität: {
      top: { type: 'leadmagnet', leadMagnet: 'produktivitaets-masterclass', variant: 'subtle' },
      bottom: { type: 'consultation', variant: 'secondary' },
    },
  };

  const fallbackConfig: { top: CTAConfig; bottom: CTAConfig } = {
    top: { type: 'newsletter', variant: 'subtle' },
    bottom: { type: 'newsletter', variant: 'primary' },
  };

  return categoryMappings[category]?.[position] || fallbackConfig[position];
};

// Finale CTA-Konfiguration
const finalTopCTA = topCTA || (showTopCTA ? getDefaultCTAForCategory(categoryStr, 'top') : null);
const finalBottomCTA =
  bottomCTA || (showBottomCTA ? getDefaultCTAForCategory(categoryStr, 'bottom') : null);
---

<article
  class:list={['prose prose-lg max-w-none dark:prose-invert', className]}
  itemscope
  itemtype="http://schema.org/BlogPosting"
  itemid={post.url}
>
  <header class="mb-12">
    {
      category && (
        <div class="mb-4">
          <a
            href={localizePath(locale, `/blog/kategorie/${categoryStr.toLowerCase()}/`)}
            class="inline-flex items-center px-3 py-1 text-sm font-medium rounded-full bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-400 hover:bg-indigo-200 dark:hover:bg-indigo-800/50 transition-colors"
          >
            {categoryStr}
          </a>
        </div>
      )
    }

    <h1 class="text-4xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-5xl mb-4">
      {title}
    </h1>

    <p class="mt-3 text-xl text-gray-500 dark:text-gray-400">
      {description}
    </p>

    <div class="mt-6 flex items-center">
      <div class="flex-shrink-0">
        {
          author && typeof author === 'object' && 'avatar' in author && author.avatar ? (
            <img
              class="h-10 w-10 rounded-full"
              src={author.avatar}
              alt={'name' in author ? String((author as any).name) : 'Author'}
            />
          ) : (
            <span class="inline-flex items-center justify-center h-10 w-10 rounded-full bg-gray-200 dark:bg-gray-700">
              <span class="text-lg font-medium text-gray-800 dark:text-gray-300">
                {authorInitial}
              </span>
            </span>
          )
        }
      </div>

      <div class="ml-3">
        <p class="text-sm font-medium text-gray-900 dark:text-white">
          {authorName}
        </p>
        <div class="flex space-x-1 text-sm text-gray-500 dark:text-gray-400">
          <time
            datetime={post.data.pubDate instanceof Date
              ? post.data.pubDate.toISOString()
              : new Date(String(post.data.pubDate)).toISOString()}
          >
            {formattedPubDate}
          </time>

          {
            readingTime && (
              <>
                <span aria-hidden="true">·</span>
                <span>{readingTime.text}</span>
              </>
            )
          }

          {
            formattedUpdatedDate && (
              <>
                <span aria-hidden="true">·</span>
                <span class="flex items-center">
                  <svg
                    class="mr-1.5 h-4 w-4 flex-shrink-0 text-gray-400"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                  Aktualisiert am {formattedUpdatedDate}
                </span>
              </>
            )
          }
        </div>
      </div>

      <div class="ml-auto flex space-x-3">
        <a
          href={twitterShareUrl}
          target="_blank"
          rel="noopener noreferrer"
          class="inline-flex items-center justify-center p-2 text-gray-400 hover:text-gray-500 dark:hover:text-gray-300"
          aria-label="Auf Twitter teilen"
        >
          <span class="sr-only">Auf Twitter teilen</span>
          <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
            <path
              d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"
            ></path>
          </svg>
        </a>

        <a
          href={facebookShareUrl}
          target="_blank"
          rel="noopener noreferrer"
          class="inline-flex items-center justify-center p-2 text-gray-400 hover:text-gray-500 dark:hover:text-gray-300"
          aria-label="Auf Facebook teilen"
        >
          <span class="sr-only">Auf Facebook teilen</span>
          <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
            <path
              fill-rule="evenodd"
              d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12z"
              clip-rule="evenodd"></path>
          </svg>
        </a>

        <a
          href={linkedinShareUrl}
          target="_blank"
          rel="noopener noreferrer"
          class="inline-flex items-center justify-center p-2 text-gray-400 hover:text-gray-500 dark:hover:text-gray-300"
          aria-label="Auf LinkedIn teilen"
        >
          <span class="sr-only">Auf LinkedIn teilen</span>
          <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
            <path
              d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"
            ></path>
          </svg>
        </a>
      </div>
    </div>

    {
      safeImage && (
        <div class="mt-8">
          <div class="aspect-w-16 aspect-h-9 overflow-hidden rounded-lg">
            <img
              src={safeImage.src}
              alt={imageAltText}
              class="h-full w-full object-cover transition-transform duration-500 group-hover:scale-105"
              loading="lazy"
              width={imageWidth}
              height={imageHeight}
            />
          </div>
          {typeof imageAlt === 'string' && (
            <p class="mt-2 text-center text-sm text-gray-500 dark:text-gray-400">{imageAlt}</p>
          )}
        </div>
      )
    }
  </header>

  <!-- Top CTA (nach Header, vor Content) -->
  {
    finalTopCTA && (
      <div class="not-prose my-8">
        {finalTopCTA.type === 'leadmagnet' && finalTopCTA.leadMagnet ? (
          <LeadMagnetCTA
            leadMagnetId={finalTopCTA.leadMagnet}
            variant={mapLeadMagnetVariant(finalTopCTA.variant)}
            title={finalTopCTA.title}
            description={finalTopCTA.description}
          />
        ) : (
          <BlogCTA
            type={finalTopCTA.type}
            position="top"
            variant={finalTopCTA.variant || 'subtle'}
            title={finalTopCTA.title}
            description={finalTopCTA.description}
            leadMagnet={finalTopCTA.leadMagnet}
          />
        )}
      </div>
    )
  }

  <div class="prose-lg max-w-none" itemprop="articleBody">
    <slot />
  </div>

  <!-- Bottom CTA (nach Content, vor Footer) -->
  <div class="not-prose my-12">
    <NewsletterCTA variant="card" />
  </div>

  {
    finalBottomCTA && (
      <div class="not-prose my-12">
        {finalBottomCTA.type === 'leadmagnet' && finalBottomCTA.leadMagnet ? (
          <LeadMagnetCTA
            leadMagnetId={finalBottomCTA.leadMagnet}
            variant={mapLeadMagnetVariant(finalBottomCTA.variant)}
            title={finalBottomCTA.title}
            description={finalBottomCTA.description}
          />
        ) : (
          <BlogCTA
            type={finalBottomCTA.type}
            position="bottom"
            variant={finalBottomCTA.variant || 'primary'}
            title={finalBottomCTA.title}
            description={finalBottomCTA.description}
            leadMagnet={finalBottomCTA.leadMagnet}
          />
        )}
      </div>
    )
  }

  {
    ((Array.isArray(tags) && tags.length > 0) || relatedPosts.length > 0) && (
      <footer class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
        {Array.isArray(tags) && tags.length > 0 && (
          <div class="mb-8">
            <h2 class="text-sm font-semibold text-gray-900 dark:text-white uppercase tracking-wider mb-4">
              Tags
            </h2>
            <div class="flex flex-wrap gap-2">
              {Array.isArray(tags) &&
                tags.map((tag: string) => (
                  <a
                    href={localizePath(locale, `/blog/tag/${tag.toLowerCase()}`)}
                    class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800 hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600 transition-colors"
                  >
                    {tag}
                  </a>
                ))}
            </div>
          </div>
        )}

        {relatedPosts && relatedPosts.length > 0 && (
          <div class="mt-16">
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">ÄhnlicheArtikel</h2>
            <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
              {relatedPosts.map((relatedPost) => (
                <BlogCard post={relatedPost} className="h-full" />
              ))}
            </div>
          </div>
        )}
      </footer>
    )
  }
</article>
