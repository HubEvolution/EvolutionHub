---
// AOSCoordinator.astro - Build-Compatible AOS Integration
// Eliminiert ALLE ES6-Imports durch CDN-basierte L√∂sung
---

<script is:inline nonce={Astro.locals.cspNonce} define:vars={{ cspNonce: Astro.locals.cspNonce }}>
  /**
   * AOSCoordinator - Build-Compatible AOS (Animate On Scroll) Integration
   * - Keine ES6-Imports oder dynamic imports (Ursache f√ºr leere JS-Chunks)
   * - CDN-basierte L√∂sung mit NPM-Fallback
   * - Cloudflare Pages SSR kompatibel
   * - Basiert auf funktionierendem HeaderScroll.astro-Pattern
   */


  // AOS Configuration - Optimized for Evolution Hub
  const AOS_CONFIG = {
    duration: 700,           // Animation duration (matches current config)
    once: true,             // Animate only once (matches current config)
    easing: 'ease-out',     // Smooth easing
    delay: 0,               // No global delay
    offset: 0,              // Trigger animations as soon as elements enter viewport (fixes above-the-fold invisibility)
    anchorPlacement: 'top-bottom', // When to trigger animation
    mirror: false,          // Don't animate elements out
    debounceDelay: 50,      // Debounce scroll events for performance
    throttleDelay: 99,      // Throttle scroll events for performance
    // Disable animations for users who prefer reduced motion (A11y)
    disable: function() {
      try {
        return !!(window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches);
      } catch (_) {
        return false;
      }
    }
  };

  // AOS Initialization Function - NO ES6 IMPORTS
  function initializeAOS() {
    console.log('[AOS] üöÄ Starting build-compatible AOS initialization...');
    
    try {
      // Check if AOS is already loaded via CDN or previous initialization
      if (window.AOS) {
        console.log('[AOS] ‚úÖ AOS already available, reinitializing...');
        window.AOS.init(AOS_CONFIG);
        setupAOSHandlers();
        // Immediate refresh + safety pass for above-the-fold visibility
        queueInitialRefreshAndSafetyPass();
        // Mark AOS as enabled so CSS can apply pre-animate state safely
        document.documentElement.classList.add('aos-enabled');
        return Promise.resolve();
      }

      console.log('[AOS] üì¶ Loading AOS library via CDN...');
      
      // Load AOS via CDN script injection (NO ES6 imports)
      return new Promise((resolve, reject) => {
        // Check if script already exists
        if (document.querySelector('script[data-aos-script]')) {
          console.log('[AOS] Script already loaded, waiting for AOS...');
          checkAOSAvailability(() => resolve(), reject, 0);
          return;
        }

        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.js';
        script.setAttribute('data-aos-script', 'true');
        try { script.setAttribute('nonce', cspNonce); } catch {}
        script.onload = () => {
          console.log('[AOS] üì¶ CDN script loaded successfully');
          checkAOSAvailability(() => resolve(), reject, 0);
        };
        script.onerror = () => {
          console.error('[AOS] ‚ùå Failed to load AOS via CDN');
          reject(new Error('Failed to load AOS from CDN'));
        };
        
        document.head.appendChild(script);
      });
      
    } catch (error) {
      console.error('[AOS] ‚ùå Failed to initialize:', error);
      return Promise.reject(error);
    }
  }

  // Check AOS availability with timeout
  function checkAOSAvailability(resolve, reject, attempts) {
    if (window.AOS) {
      console.log('[AOS] ‚öôÔ∏è  Initializing AOS with config:', AOS_CONFIG);
      window.AOS.init(AOS_CONFIG);
      setupAOSHandlers();
      // Immediate refresh + safety pass for above-the-fold visibility
      queueInitialRefreshAndSafetyPass();
      // Mark AOS as enabled so CSS can apply pre-animate state safely
      document.documentElement.classList.add('aos-enabled');
      console.log('[AOS] ‚úÖ Animation library initialized successfully');
      resolve();
    } else if (attempts < 50) { // 5 second timeout
      setTimeout(() => checkAOSAvailability(resolve, reject, attempts + 1), 100);
    } else {
      console.error('[AOS] ‚ùå Timeout waiting for AOS to become available');
      reject(new Error('AOS initialization timeout'));
    }
  }

  // Setup AOS handlers for page transitions and cleanup
  function setupAOSHandlers() {
    // Refresh AOS on page transitions (Astro compatibility)
    const refreshAOS = () => {
      if (window.AOS && window.AOS.refresh) {
        console.log('[AOS] üîÑ Refreshing animations for page transition...');
        window.AOS.refresh();
        // Run safety pass again after refresh to ensure visibility
        runSafetyPassInView();
      }
    };
    
    // Store refresh function for cleanup
    window.aosRefresh = refreshAOS;
  }

  // Schedules an immediate refresh (next frame) and runs a safety pass to mark
  // elements currently in the viewport as animated to prevent hidden content.
  function queueInitialRefreshAndSafetyPass() {
    try {
      // Next animation frame: perform a hard refresh if available
      requestAnimationFrame(() => {
        if (window.AOS) {
          if (typeof window.AOS.refreshHard === 'function') {
            window.AOS.refreshHard();
          } else if (typeof window.AOS.refresh === 'function') {
            window.AOS.refresh();
          }
        }
        // Safety pass after refresh
        runSafetyPassInView();
      });

      // Also run once after load to cover late layout shifts
      window.addEventListener('load', () => {
        runSafetyPassInView();
      }, { once: true });
    } catch (e) {
      console.warn('[AOS] ‚ö†Ô∏è Safety pass scheduling failed:', e);
    }
  }

  // Safety pass: force-animate elements currently visible in the viewport
  function runSafetyPassInView() {
    try {
      const candidates = Array.from(document.querySelectorAll('[data-aos].aos-init:not(.aos-animate)'));
      const vh = window.innerHeight || document.documentElement.clientHeight;
      let forced = 0;
      for (const el of candidates) {
        const rect = el.getBoundingClientRect();
        const inView = rect.top < vh && rect.bottom > 0;
        if (inView) {
          el.classList.add('aos-animate');
          forced++;
        }
      }
      if (forced > 0) {
        console.log(`[AOS] ‚úÖ Safety pass applied to ${forced} element(s) in view`);
      } else {
        console.log('[AOS] ‚úÖ Safety pass completed (no elements needed forcing)');
      }
    } catch (e) {
      console.warn('[AOS] ‚ö†Ô∏è Safety pass failed:', e);
    }
  }

  // Settings Module Logic wurde zu src/lib/settings-module.ts migriert
  // Diese Logik geh√∂rt nicht in den AOSCoordinator (Trennung der Verantwortlichkeiten)
  // settings-module.ts wird √ºber den globalen script-coordinator.ts verwaltet

  // Main Coordinator Function (specialized for AOS-only integration)
  function initializeCoordinator() {
    console.log('[AOSCoordinator] üöÄ Starting AOS coordinator initialization...');
    
    try {
      // Initialize AOS (MEDIUM priority) - Promise-based but non-blocking
      initializeAOS()
        .then(() => {
          console.log('[AOSCoordinator] ‚úÖ AOS module initialized successfully');
        })
        .catch((error) => {
          console.error('[AOSCoordinator] ‚ùå AOS initialization failed:', error);
          console.warn('[AOSCoordinator] ‚ö†Ô∏è  Continuing without animations (graceful degradation)');
        });
      
      // Note: Settings handlers are now managed by src/lib/settings-module.ts via script-coordinator.ts
      
      console.log('[AOSCoordinator] ‚úÖ AOS coordinator initialization completed');
      
    } catch (error) {
      console.error('[AOSCoordinator] ‚ùå AOS coordinator initialization failed:', error);
    }
  }

  // Cleanup Function (AOS-only)
  window.aosCoordinatorCleanup = function() {
    // Cleanup AOS
    if (window.AOS && window.AOS.refresh) {
      console.log('[AOSCoordinator] üîÑ Refreshing AOS for cleanup');
      window.AOS.refresh();
    }
    // Remove the AOS-enabled marker to restore safety fallback
    document.documentElement.classList.remove('aos-enabled');
    
    // Note: Settings cleanup is now handled by src/lib/settings-module.ts via script-coordinator.ts
    
    console.log('[AOSCoordinator] üßπ AOS coordinator cleaned up');
  };

  // Initialize when DOM is ready (funktionierendes Pattern aus HeaderScroll.astro)
  if (document.readyState !== 'loading') {
    initializeCoordinator();
  } else {
    document.addEventListener('DOMContentLoaded', initializeCoordinator);
  }

  // Astro page transitions support
  document.addEventListener('astro:page-load', () => {
    console.log('[AOSCoordinator] üîÑ Astro page transition detected');
    initializeCoordinator();
  });

  // Cleanup on page unload
  window.addEventListener('beforeunload', () => {
    if (window.aosCoordinatorCleanup) {
      window.aosCoordinatorCleanup();
    }
  });

  console.log('[AOSCoordinator] üìã Coordinator module loaded and ready');
</script>

<!-- Dummy HTML node to force Astro script compilation/injection (HeaderScroll-Pattern) -->
<div style="display: none;" aria-hidden="true"></div>
