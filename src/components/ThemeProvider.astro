---
// This component initializes the theme and listens for theme change events
// It works with ThemeToggle to manage the theme state
---

<script is:inline nonce={Astro.locals.cspNonce}>
  const getTheme = () => {
    // Check for a saved theme in localStorage, otherwise check system preference
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  };

  const applyTheme = (theme) => {
    // Apply the 'dark' class to the html element based on the theme
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  };

  const syncPressedAttr = () => {
    const btn = document.querySelector('.theme-toggle');
    if (!btn) return;
    const isDark = document.documentElement.classList.contains('dark');
    btn.setAttribute('aria-pressed', isDark ? 'true' : 'false');
  };

  // Get the initial theme and apply it
  const theme = getTheme();
  applyTheme(theme);
  syncPressedAttr();

  // Save the initial theme to localStorage
  if (typeof localStorage !== 'undefined') {
    localStorage.setItem('theme', theme);
  }

  const handleToggleClick = () => {
    // Toggle the 'dark' class on the html element
    const element = document.documentElement;
    element.classList.toggle('dark');

    // Check if the 'dark' class is now present and update localStorage
    const isDark = element.classList.contains('dark');
    if (typeof localStorage !== 'undefined') {
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    }
    syncPressedAttr();
  };

  const addClickListener = () => {
    // Find the theme toggle button and add a click event listener
    const themeToggle = document.querySelector('.theme-toggle');

    if (themeToggle) {
      themeToggle.addEventListener('click', handleToggleClick);
      syncPressedAttr();
    }
  };

  // Add the click listener on initial page load
  document.addEventListener('DOMContentLoaded', addClickListener);

  // Re-add the click listener after Astro's view transitions
  document.addEventListener('astro:after-swap', addClickListener);
</script>

<slot />
