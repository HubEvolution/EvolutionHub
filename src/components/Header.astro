---
// src/components/Header.astro

import ThemeToggle from './ThemeToggle.astro';
// Korrigierter Import für getLocale – erwartet einen benannten Export und .js Erweiterung
import { getLocale } from '@/lib/i18n';
// Import der dedizierten Scroll-Effect Komponente
import HeaderScroll from './scripts/HeaderScroll.astro';

// Get current locale for language switching
// These variables should be defined in Markdown Frontmatter or accessible in the script.
// Ensuring they are correctly defined and typed.
const currentLocale = getLocale(Astro.url.pathname); 

// Generate proper URLs for language switching
function generateLanguageUrl(targetLocale: string, currentPath: string): string {
  // If not currently on a localized path, send user to the locale home
  const isLocalized = /^\/(de|en)(\/|$)/.test(currentPath);
  if (!isLocalized) {
    return `/${targetLocale}/`;
  }

  // Remove any existing locale prefix (supports "/de", "/de/", "/en", "/en/")
  const cleanPath = currentPath.replace(/^\/(de|en)(\/|$)/, '/');

  // Handle root path
  if (cleanPath === '/') {
    return `/${targetLocale}/`;
  }

  // Add new locale prefix
  return `/${targetLocale}${cleanPath}`;
}

// Navigation items with ARIA labels
const navItems = [
  { name: 'Dashboard', href: '/dashboard', 'aria-label': 'Go to Dashboard' },
  { name: 'Tools', href: '/tools', 'aria-label': 'View available tools' },
  { name: 'Pricing', href: '/pricing', 'aria-label': 'View pricing plans' },
  { name: 'Documentation', href: '/docs', 'aria-label': 'View documentation' },
];

// Get current URL and path for active link highlighting
const url = Astro.url;
const currentPath = url.pathname;

// Function to check if a nav item is active
const isActive = (path: string): boolean => {
  // Check direct path match
  if (currentPath === path) return true;

  // Check for sub-routes
  if (path === '/dashboard') {
    return currentPath.startsWith('/dashboard');
  }

  return false;
};
---

<header id="site-header" data-testid="site-header" class="sticky top-0 z-50 bg-white/80 dark:bg-gray-900/80 backdrop-blur-lg border-b border-gray-100 dark:border-gray-800 shadow-sm transition-all duration-300 hover:shadow-md header-visible">
  <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8" aria-label="Main navigation">
    <div class="flex items-center justify-between h-20">
      <!-- Logo -->
      <div class="flex-shrink-0 flex items-center group">
        <a href="/" class="flex items-center space-x-3 group-hover:scale-105 transition-transform duration-300">
          <div class="w-8 h-8 rounded-lg bg-gradient-to-br from-emerald-500 to-cyan-500 flex items-center justify-center">
            <span class="text-white font-bold text-lg">E</span>
          </div>
          <span class="text-xl font-bold bg-gradient-to-r from-emerald-600 to-cyan-500 bg-clip-text text-transparent">
            Evolution Hub
          </span>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden md:ml-10 md:flex md:items-center md:space-x-1">
        {navItems.map((item) => (
          <a
            href={item.href}
            class={`relative px-4 py-2.5 text-sm font-medium transition-all duration-300 rounded-lg group ${
              isActive(item.href)
                ? 'text-emerald-600 dark:text-emerald-400'
                : 'text-gray-600 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white'
            }`}
            aria-current={isActive(item.href) ? 'page' : undefined}
            aria-label={item['aria-label']}
          >
            {item.name}
            {isActive(item.href) && (
              <span class="absolute inset-x-1 -bottom-1 h-0.5 bg-gradient-to-r from-emerald-500 to-cyan-500 rounded-full" />
            )}
            <span class="absolute inset-x-1 -bottom-1 h-0.5 bg-gradient-to-r from-emerald-500 to-cyan-500 rounded-full transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300" />
            {isActive(item.href) && <span class="sr-only">(current page)</span>}
          </a>
        ))}
      </div>

      <div class="flex items-center space-x-3">
        <!-- Theme Toggle -->
        <div class="hidden md:block">
          <ThemeToggle />
        </div>

        <!-- Language Switcher -->
        <div class="hidden md:block relative" role="region" aria-label="Language selector">
          <button
            type="button"
            class="flex items-center text-gray-700 dark:text-gray-300 hover:text-emerald-500 dark:hover:text-emerald-400 p-1.5 rounded-lg focus:outline-none focus-visible:ring-2 focus-visible:ring-emerald-500"
            aria-expanded="false"
            aria-haspopup="menu"
            id="language-selector"
          >
            <span class="flex items-center">
              <span class="mr-2 text-sm font-medium">{currentLocale === 'de' ? 'Deutsch' : 'English'}</span>
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 transition-transform duration-200" id="language-arrow" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </span>
          </button>

          <!-- Language Dropdown Menu -->
          <div
            class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700 py-2 z-50 opacity-0 transform scale-95 transition-all duration-200 pointer-events-none"
            id="language-dropdown"
            data-testid="language-dropdown"
            role="menu"
            aria-orientation="vertical"
            aria-labelledby="language-selector"
          >
            <!-- German Option -->
            <a
              href={generateLanguageUrl('de', Astro.url.pathname)}
              class={`dropdown-item flex items-center px-4 py-2 text-sm transition-colors hover:bg-gray-50 dark:hover:bg-gray-700/50 ${
                currentLocale === 'de'
                  ? 'text-emerald-600 dark:text-emerald-400 font-medium'
                  : 'text-gray-700 dark:text-gray-300'
              }`}
              role="menuitem"
              tabindex="-1"
              aria-current={currentLocale === 'de' ? 'page' : undefined}
            >
              <span>Deutsch</span>
              {currentLocale === 'de' && (
                <svg class="ml-auto w-4 h-4 text-emerald-500" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
              )}
            </a>

            <!-- English Option -->
            <a
              href={generateLanguageUrl('en', Astro.url.pathname)}
              class={`dropdown-item flex items-center px-4 py-2 text-sm transition-colors hover:bg-gray-50 dark:hover:bg-gray-700/50 ${
                currentLocale === 'en'
                  ? 'text-emerald-600 dark:text-emerald-400 font-medium'
                  : 'text-gray-700 dark:text-gray-300'
              }`}
              role="menuitem"
              tabindex="-1"
              aria-current={currentLocale === 'en' ? 'page' : undefined}
            >
              <span>English</span>
              {currentLocale === 'en' && (
                <svg class="ml-auto w-4 h-4 text-emerald-500" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
              )}
            </a>
          </div>
        </div>

        <!-- Mobile Menu Button -->
        <div class="md:hidden">
          <button
            type="button"
            id="mobile-menu-button"
            data-testid="mobile-menu-button"
            class="inline-flex items-center justify-center p-2 rounded-md text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-emerald-500"
            aria-expanded="false"
            aria-controls="mobile-menu"
          >
            <span class="sr-only">Open main menu</span>
            <!-- Icon when menu is closed -->
            <svg class="h-6 w-6 transition-transform" id="menu-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  </nav>

  <!-- Mobile menu, show/hide based on menu state -->
  <div class="md:hidden hidden" id="mobile-menu" data-testid="mobile-menu">
    <div class="px-2 pt-2 pb-3 space-y-1 border-t border-gray-200 dark:border-gray-700">
      {navItems.map((item) => (
        <a
          href={item.href}
          class={`block px-3 py-2 text-base font-medium rounded-md ${
            isActive(item.href)
              ? 'bg-emerald-50 dark:bg-emerald-900/20 text-emerald-600 dark:text-emerald-400'
              : 'text-gray-700 hover:bg-gray-50 dark:text-gray-300 dark:hover:bg-gray-800'
          }`}
          aria-current={isActive(item.href) ? 'page' : undefined}
          aria-label={item['aria-label']}
        >
          {item.name}
        </a>
      ))}
      
      <div class="px-3 py-2 border-t border-gray-200 dark:border-gray-700 mt-3 pt-3">
        <div class="flex items-center justify-between">
          <div class="text-sm font-medium text-gray-700 dark:text-gray-300">Theme</div>
          <ThemeToggle />
        </div>
      </div>
      
      <div class="px-3 py-2 border-t border-gray-200 dark:border-gray-700">
        <div class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Language</div>
        <div class="flex flex-col space-y-1">
          <a
            href={generateLanguageUrl('de', Astro.url.pathname)}
            class={`block px-3 py-2 text-base rounded-md ${
              currentLocale === 'de'
                ? 'bg-emerald-50 dark:bg-emerald-900/20 text-emerald-600 dark:text-emerald-400 font-medium'
                : 'text-gray-700 hover:bg-gray-50 dark:text-gray-300 dark:hover:bg-gray-800'
            }`}
          >
            Deutsch
          </a>
          <a
            href={generateLanguageUrl('en', Astro.url.pathname)}
            class={`block px-3 py-2 text-base rounded-md ${
              currentLocale === 'en'
                ? 'bg-emerald-50 dark:bg-emerald-900/20 text-emerald-600 dark:text-emerald-400 font-medium'
                : 'text-gray-700 hover:bg-gray-50 dark:text-gray-300 dark:hover:bg-gray-800'
            }`}
          >
            English
          </a>
        </div>
      </div>
    </div>
  </div>
</header>

<script is:inline>
  // Inline script for Cloudflare Pages build compatibility
  function initializeHeaderScripts() {
    console.log('[Header] 🚀 Initializing header scripts (inline version)');
    
    // === MOBILE MENU FUNCTIONALITY ===
    function initMobileMenu() {
      console.log('[Header] 🔄 Initializing mobile menu functionality');
      
      const mobileMenuButton = document.getElementById('mobile-menu-button');
      const mobileMenu = document.getElementById('mobile-menu');
      
      if (!mobileMenu) {
        console.error('[Header] ❌ Mobile menu element (#mobile-menu) not found');
        return;
      }
      
      if (!mobileMenuButton) {
        console.error('[Header] ❌ Mobile menu button (#mobile-menu-button) not found');
        return;
      }
      
      let isOpen = false;
      
      function toggleMenu() {
        console.log('[MobileMenu] 🔄 Toggling menu, current state:', isOpen);
        isOpen = !isOpen;
        
        if (isOpen) {
          mobileMenu.classList.remove('hidden');
          mobileMenu.classList.add('block');
          mobileMenuButton.setAttribute('aria-expanded', 'true');
          console.log('[MobileMenu] ✅ Menu opened');
        } else {
          mobileMenu.classList.remove('block');
          mobileMenu.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
          console.log('[MobileMenu] ✅ Menu closed');
        }
      }
      
      // Event listeners
      mobileMenuButton.addEventListener('click', function(e) {
        console.log('[MobileMenu] 🖱️ Button clicked');
        e.preventDefault();
        e.stopPropagation();
        toggleMenu();
      });

      // Keyboard support
      mobileMenuButton.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          toggleMenu();
        }
      });

      // Close on outside click
      document.addEventListener('click', function(e) {
        if (isOpen && !mobileMenu.contains(e.target) && !mobileMenuButton.contains(e.target)) {
          toggleMenu();
        }
      });
      
      // Close on ESC
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && isOpen) {
          toggleMenu();
        }
      });
      
      console.log('[Header] ✅ Mobile menu initialized successfully');
    }
    
    // === LANGUAGE DROPDOWN FUNCTIONALITY ===
    function initLanguageDropdown() {
      console.log('[Header] 🔄 Initializing language dropdown functionality');
      
      const languageButton = document.getElementById('language-selector');
      const languageDropdown = document.getElementById('language-dropdown');
      
      if (!languageButton || !languageDropdown) {
        console.error('[Header] ❌ Language selector elements not found', {
          button: !!languageButton,
          dropdown: !!languageDropdown
        });
        return;
      }
      
      let isOpen = false;
      
      function toggleDropdown() {
        console.log('[LanguageDropdown] 🔄 Toggling dropdown, current state:', isOpen);
        isOpen = !isOpen;
        
        if (isOpen) {
          // Show dropdown: remove opacity-0, scale-95, pointer-events-none
          languageDropdown.classList.remove('opacity-0', 'scale-95', 'pointer-events-none');
          languageDropdown.classList.add('opacity-100', 'scale-100');
          languageButton.setAttribute('aria-expanded', 'true');
          console.log('[LanguageDropdown] ✅ Dropdown opened');
        } else {
          // Hide dropdown: add opacity-0, scale-95, pointer-events-none
          languageDropdown.classList.remove('opacity-100', 'scale-100');
          languageDropdown.classList.add('opacity-0', 'scale-95', 'pointer-events-none');
          languageButton.setAttribute('aria-expanded', 'false');
          console.log('[LanguageDropdown] ✅ Dropdown closed');
        }
      }
      
      // Event listeners
      languageButton.addEventListener('click', function(e) {
        console.log('[LanguageDropdown] 🖱️ Button clicked');
        e.preventDefault();
        e.stopPropagation();
        toggleDropdown();
      });
      
      // Keyboard support
      languageButton.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          toggleDropdown();
        }
      });
      
      // Close on outside click
      document.addEventListener('click', function(e) {
        if (isOpen && !languageDropdown.contains(e.target) && !languageButton.contains(e.target)) {
          toggleDropdown();
        }
      });
      
      // Close on ESC
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && isOpen) {
          toggleDropdown();
        }
      });
      
      console.log('[Header] ✅ Language dropdown initialized successfully');
    }
    
    // === HEADER SCROLL EFFECT FUNCTIONALITY ===
    function initHeaderScrollEffect() {
      console.log('[Header] 🔄 Initializing scroll effect functionality');
      
      const header = document.getElementById('site-header');
      if (!header) {
        console.error('[Header] ❌ Header element (#site-header) not found');
        return;
      }
      
      let lastScrollY = window.scrollY;
      let ticking = false;
      const scrollThreshold = 60;
      const scrollDeltaThreshold = 5;
      
      // Initialize header state
      header.classList.add('header-visible');
      header.classList.remove('header-hidden');
      
      function handleScroll() {
        const currentScrollY = window.scrollY;
        const scrollDelta = currentScrollY - lastScrollY;
        const scrollDirection = scrollDelta > 0 ? 'down' : 'up';
        
        console.log('[HeaderScroll] 📊 Scroll detected:', {
          currentY: currentScrollY,
          lastY: lastScrollY,
          delta: scrollDelta,
          direction: scrollDirection
        });
        
        // Above threshold - keep header visible
        if (currentScrollY <= scrollThreshold) {
          showHeader();
          lastScrollY = currentScrollY;
          ticking = false;
          return;
        }
        
        // Check if scrolled enough
        if (Math.abs(scrollDelta) < scrollDeltaThreshold) {
          ticking = false;
          return;
        }
        
        // Hide on scroll down, show on scroll up
        if (scrollDirection === 'down') {
          hideHeader();
        } else {
          showHeader();
        }
        
        lastScrollY = currentScrollY;
        ticking = false;
      }
      
      function showHeader() {
        header.classList.add('header-visible');
        header.classList.remove('header-hidden');
        console.log('[HeaderScroll] 👆 Header shown');
      }
      
      function hideHeader() {
        header.classList.add('header-hidden');
        header.classList.remove('header-visible');
        console.log('[HeaderScroll] 👇 Header hidden');
      }
      
      // Scroll listener with throttling
      window.addEventListener('scroll', function() {
        if (!ticking) {
          requestAnimationFrame(function() {
            handleScroll();
          });
          ticking = true;
        }
      }, { passive: true });
      
      console.log('[Header] ✅ Scroll effect initialized successfully');
    }
    
    // Initialize all modules
    try {
      initMobileMenu();
      initLanguageDropdown();
      initHeaderScrollEffect();
      console.log('[Header] 🎉 All header functionality initialized successfully');
    } catch (error) {
      console.error('[Header] ❌ Failed to initialize header scripts:', error);
    }
  }
  
  // Initialize all header scripts when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeHeaderScripts);
  } else {
    initializeHeaderScripts();
  }
</script>

<style>
  /* Styles für die Header-Animation - wichtig: Spezifischere Selektoren verwenden */
  #site-header.header-visible {
    transform: translateY(0);
    opacity: 1;
    pointer-events: auto;
  }
  
  #site-header.header-hidden {
    transform: translateY(-100%);
    opacity: 0;
    pointer-events: none;
  }
  
  /* Add smooth transitions for the header - wichtig: Will-change für Performance */
  #site-header {
    transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
    will-change: transform, opacity;
    z-index: 50;
  }

  /* Glassmorphism effect */
  .backdrop-blur-lg {
    backdrop-filter: blur(12px);
  }

  /* Focus styles for better keyboard navigation */
  a:focus-visible,
  button:focus-visible,
  [role="menuitem"]:focus-visible {
    outline: 2px solid #10b981;
    outline-offset: 2px;
    border-radius: 0.25rem;
  }
</style>
<style>
  /* High contrast mode support */
  @media (forced-colors: active) {
    a:focus-visible,
    button:focus-visible,
    [role="menuitem"]:focus-visible {
      outline: 2px solid Highlight !important;
      outline-offset: 2px;
    }
  }
</style>

<!-- HeaderScroll-Komponente für Scroll-Effekt -->
<HeaderScroll />
