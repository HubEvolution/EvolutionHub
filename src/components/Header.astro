---
// src/components/Header.astro

import ThemeToggle from './ThemeToggle.astro';
// Korrigierter Import für getLocale – erwartet einen benannten Export und .js Erweiterung
import { getLocale } from '@/lib/i18n';
// Import der dedizierten Scroll-Effect Komponente
import HeaderScroll from './scripts/HeaderScroll.astro';
import EvolutionHubLogo from 'public/assets/svg/evolutionhub-logo.svg';
import { localizePath } from '@/lib/locale-path';

// Get current locale for language switching
// These variables should be defined in Markdown Frontmatter or accessible in the script.
// Ensuring they are correctly defined and typed.
const currentLocale = getLocale(Astro.url.pathname);

// Helper für aktive Navigation: vergleicht gegen lokalisierte Hrefs
function isActiveLocalized(href: string): boolean {
  const localized = localizePath(currentLocale, href);
  if (currentPath === localized) return true;
  // Sub-Routen (z. B. Dashboard-Unterseiten)
  return currentPath.startsWith(localized.endsWith('/') ? localized : `${localized}/`);
}

// Navigation items with ARIA labels
const navItems = [
  { name: 'Dashboard', href: '/dashboard', 'aria-label': 'Go to Dashboard' },
  { name: 'Tools', href: '/tools', 'aria-label': 'View available tools' },
  { name: 'Pricing', href: '/pricing', 'aria-label': 'View pricing plans' },
  { name: 'Blog', href: '/blog', 'aria-label': 'View blog posts' },
];

// Get current URL and path for active link highlighting
const url = Astro.url;
const currentPath = url.pathname;

// (entfernt) Unbenutzte isActive-Hilfsfunktion, um Lint-Fehler zu vermeiden

// Baue Sprachwechsel-Link mit persistenter Auswahl via set_locale & next
// - next verweist auf die aktuelle vollständige URL (inkl. Query/Hash), URL-enkodiert
// - Basis-Link bleibt der aktuelle Pfad; das Middleware-Redirect mappt anhand von `next` auf die Ziel-Locale
function setLocaleHref(target: 'de' | 'en'): string {
  const base = Astro.url.pathname;
  const next = encodeURIComponent(Astro.url.toString());
  const sep = base.includes('?') ? '&' : '?';
  // Entferne etwaige Hash-Fragmente aus base, damit wir ein sauberes Query anhängen
  const cleanBase = base.split('#')[0];
  return `${cleanBase}${sep}set_locale=${target}&next=${next}`;
}
---

<header
  id="site-header"
  data-testid="site-header"
  data-aos="fade-down"
  data-aos-duration="600"
  data-aos-once="true"
  data-aos-anchor-placement="top-top"
  data-aos-easing="ease-out"
  class="sticky top-0 z-50 mx-4 md:mx-8 rounded-2xl glass-header header-visible"
>
  <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8" aria-label="Main navigation">
    <div class="flex items-center justify-between h-20">
      <!-- Logo -->
      <div class="flex-shrink-0 flex items-center group">
        <a
          href={localizePath(currentLocale, '/')}
          class="flex items-center space-x-3 group-hover:scale-105 transition-transform duration-300"
        >
          <EvolutionHubLogo />
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden md:ml-10 md:flex md:items-center md:space-x-1">
        {
          navItems.map((item) => (
            <a
              href={localizePath(currentLocale, item.href)}
              class={`relative px-4 py-2.5 text-sm font-medium transition-all duration-300 rounded-lg group ${
                isActiveLocalized(item.href)
                  ? 'text-emerald-600 dark:text-emerald-400'
                  : 'text-gray-600 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white'
              }`}
              aria-current={isActiveLocalized(item.href) ? 'page' : undefined}
              aria-label={item['aria-label']}
            >
              {item.name}
              {isActiveLocalized(item.href) && (
                <span class="absolute inset-x-1 -bottom-1 h-0.5 bg-gradient-to-r from-emerald-500 to-cyan-500 rounded-full" />
              )}
              <span class="absolute inset-x-1 -bottom-1 h-0.5 bg-gradient-to-r from-emerald-500 to-cyan-500 rounded-full transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300" />
              {isActiveLocalized(item.href) && <span class="sr-only">(current page)</span>}
            </a>
          ))
        }
      </div>

      <div class="flex items-center space-x-3">
        <!-- Theme Toggle -->
        <div class="hidden md:block">
          <ThemeToggle />
        </div>

        <!-- Language Switcher -->
        <div class="hidden md:block relative" role="region" aria-label="Language selector">
          <button
            type="button"
            class="flex items-center text-gray-700 dark:text-gray-300 hover:text-emerald-500 dark:hover:text-emerald-400 p-1.5 rounded-lg focus:outline-none focus-visible:ring-2 focus-visible:ring-emerald-500"
            aria-expanded="false"
            aria-haspopup="menu"
            id="language-selector"
          >
            <span class="flex items-center">
              <span class="mr-2 text-sm font-medium"
                >{currentLocale === 'de' ? 'Deutsch' : 'English'}</span
              >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-4 w-4 transition-transform duration-200"
                id="language-arrow"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M19 9l-7 7-7-7"></path>
              </svg>
            </span>
          </button>

          <!-- Language Dropdown Menu -->
          <div
            class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700 py-2 z-50 opacity-0 transform scale-95 transition-all duration-200 pointer-events-none"
            id="language-dropdown"
            data-testid="language-dropdown"
            role="menu"
            aria-orientation="vertical"
            aria-labelledby="language-selector"
          >
            <!-- German Option -->
            <a
              href={setLocaleHref('de')}
              class={`dropdown-item flex items-center px-4 py-2 text-sm transition-colors hover:bg-gray-50 dark:hover:bg-gray-700/50 ${
                currentLocale === 'de'
                  ? 'text-emerald-600 dark:text-emerald-400 font-medium'
                  : 'text-gray-700 dark:text-gray-300'
              }`}
              role="menuitem"
              tabindex="-1"
              aria-current={currentLocale === 'de' ? 'page' : undefined}
              data-astro-reload
            >
              <span>Deutsch</span>
              {
                currentLocale === 'de' && (
                  <svg
                    class="ml-auto w-4 h-4 text-emerald-500"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                      clip-rule="evenodd"
                    />
                  </svg>
                )
              }
            </a>

            <!-- English Option -->
            <a
              href={setLocaleHref('en')}
              class={`dropdown-item flex items-center px-4 py-2 text-sm transition-colors hover:bg-gray-50 dark:hover:bg-gray-700/50 ${
                currentLocale === 'en'
                  ? 'text-emerald-600 dark:text-emerald-400 font-medium'
                  : 'text-gray-700 dark:text-gray-300'
              }`}
              role="menuitem"
              tabindex="-1"
              aria-current={currentLocale === 'en' ? 'page' : undefined}
              data-astro-reload
            >
              <span>English</span>
              {
                currentLocale === 'en' && (
                  <svg
                    class="ml-auto w-4 h-4 text-emerald-500"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                      clip-rule="evenodd"
                    />
                  </svg>
                )
              }
            </a>
          </div>
        </div>

        <!-- Mobile Menu Button -->
        <div class="md:hidden">
          <button
            type="button"
            id="mobile-menu-button"
            data-testid="mobile-menu-button"
            class="inline-flex items-center justify-center p-2 rounded-md text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-emerald-500"
            aria-expanded="false"
            aria-controls="mobile-menu"
          >
            <span class="sr-only">Open main menu</span>
            <!-- Icon when menu is closed -->
            <svg
              class="h-6 w-6 transition-transform"
              id="menu-icon"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              aria-hidden="true"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </nav>

  <!-- Mobile menu, show/hide based on menu state -->
  <div class="md:hidden hidden" id="mobile-menu" data-testid="mobile-menu">
    <div class="px-2 pt-2 pb-3 space-y-1 border-t border-gray-200 dark:border-gray-700">
      {
        navItems.map((item) => (
          <a
            href={localizePath(currentLocale, item.href)}
            class={`block px-3 py-2 text-base font-medium rounded-md ${
              isActiveLocalized(item.href)
                ? 'bg-emerald-50 dark:bg-emerald-900/20 text-emerald-600 dark:text-emerald-400'
                : 'text-gray-700 hover:bg-gray-50 dark:text-gray-300 dark:hover:bg-gray-800'
            }`}
            aria-current={isActiveLocalized(item.href) ? 'page' : undefined}
            aria-label={item['aria-label']}
          >
            {item.name}
          </a>
        ))
      }

      <div class="px-3 py-2 border-t border-gray-200 dark:border-gray-700 mt-3 pt-3">
        <div class="flex items-center justify-between">
          <div class="text-sm font-medium text-gray-700 dark:text-gray-300">Theme</div>
          <ThemeToggle />
        </div>
      </div>

      <div class="px-3 py-2 border-t border-gray-200 dark:border-gray-700">
        <div class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Language</div>
        <div class="flex flex-col space-y-1">
          <a
            href={setLocaleHref('de')}
            class={`block px-3 py-2 text-base rounded-md ${
              currentLocale === 'de'
                ? 'bg-emerald-50 dark:bg-emerald-900/20 text-emerald-600 dark:text-emerald-400 font-medium'
                : 'text-gray-700 hover:bg-gray-50 dark:text-gray-300 dark:hover:bg-gray-800'
            }`}
            data-astro-reload
          >
            Deutsch
          </a>
          <a
            href={setLocaleHref('en')}
            class={`block px-3 py-2 text-base rounded-md ${
              currentLocale === 'en'
                ? 'bg-emerald-50 dark:bg-emerald-900/20 text-emerald-600 dark:text-emerald-400 font-medium'
                : 'text-gray-700 hover:bg-gray-50 dark:text-gray-300 dark:hover:bg-gray-800'
            }`}
            data-astro-reload
          >
            English
          </a>
        </div>
      </div>
    </div>
  </div>
</header>

<script is:inline nonce={Astro.locals.cspNonce}>
  let mobileMenuInitialized = false;
  let languageDropdownInitialized = false;
  // Inline script for Cloudflare Pages build compatibility
  function initializeHeaderScripts() {
    console.log('[Header] 🚀 Initializing header scripts (inline version)');

    // === MOBILE MENU FUNCTIONALITY ===
    function initMobileMenu() {
      console.log('[Header] 🔄 Initializing mobile menu functionality');
      if (mobileMenuInitialized) {
        console.log('[Header] ℹ️ Mobile menu already initialized');
        return;
      }

      const mobileMenuButton = document.getElementById('mobile-menu-button');
      const mobileMenu = document.getElementById('mobile-menu');

      if (!mobileMenu) {
        console.error('[Header] ❌ Mobile menu element (#mobile-menu) not found');
        return;
      }

      if (!mobileMenuButton) {
        console.error('[Header] ❌ Mobile menu button (#mobile-menu-button) not found');
        return;
      }

      let isOpen = false;

      function toggleMenu() {
        console.log('[MobileMenu] 🔄 Toggling menu, current state:', isOpen);
        isOpen = !isOpen;

        if (isOpen) {
          mobileMenu.classList.remove('hidden');
          mobileMenu.classList.add('block');
          mobileMenuButton.setAttribute('aria-expanded', 'true');
          console.log('[MobileMenu] ✅ Menu opened');
        } else {
          mobileMenu.classList.remove('block');
          mobileMenu.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
          console.log('[MobileMenu] ✅ Menu closed');
        }
      }

      // Event listeners
      mobileMenuButton.addEventListener('click', function (e) {
        console.log('[MobileMenu] 🖱️ Button clicked');
        e.preventDefault();
        e.stopPropagation();
        toggleMenu();
      });

      // Keyboard support
      mobileMenuButton.addEventListener('keydown', function (e) {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          toggleMenu();
        }
      });

      // Close on outside click
      document.addEventListener('click', function (e) {
        if (isOpen && !mobileMenu.contains(e.target) && !mobileMenuButton.contains(e.target)) {
          toggleMenu();
        }
      });

      // Close on ESC
      document.addEventListener('keydown', function (e) {
        if (e.key === 'Escape' && isOpen) {
          toggleMenu();
        }
      });

      mobileMenuInitialized = true;
      console.log('[Header] ✅ Mobile menu initialized successfully');
    }

    // === LANGUAGE DROPDOWN FUNCTIONALITY ===
    function initLanguageDropdown() {
      console.log('[Header] 🔄 Initializing language dropdown functionality');
      if (languageDropdownInitialized) {
        console.log('[Header] ℹ️ Language dropdown already initialized');
        return;
      }

      const languageButton = document.getElementById('language-selector');
      const languageDropdown = document.getElementById('language-dropdown');

      if (!languageButton || !languageDropdown) {
        console.error('[Header] ❌ Language selector elements not found', {
          button: !!languageButton,
          dropdown: !!languageDropdown,
        });
        return;
      }

      let isOpen = false;

      function toggleDropdown() {
        console.log('[LanguageDropdown] 🔄 Toggling dropdown, current state:', isOpen);
        isOpen = !isOpen;

        if (isOpen) {
          // Show dropdown: remove opacity-0, scale-95, pointer-events-none
          languageDropdown.classList.remove('opacity-0', 'scale-95', 'pointer-events-none');
          languageDropdown.classList.add('opacity-100', 'scale-100');
          languageButton.setAttribute('aria-expanded', 'true');
          console.log('[LanguageDropdown] ✅ Dropdown opened');
        } else {
          // Hide dropdown: add opacity-0, scale-95, pointer-events-none
          languageDropdown.classList.remove('opacity-100', 'scale-100');
          languageDropdown.classList.add('opacity-0', 'scale-95', 'pointer-events-none');
          languageButton.setAttribute('aria-expanded', 'false');
          console.log('[LanguageDropdown] ✅ Dropdown closed');
        }
      }

      // Event listeners
      languageButton.addEventListener('click', function (e) {
        console.log('[LanguageDropdown] 🖱️ Button clicked');
        e.preventDefault();
        e.stopPropagation();
        toggleDropdown();
      });

      // Keyboard support
      languageButton.addEventListener('keydown', function (e) {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          toggleDropdown();
        }
      });

      // Close on outside click
      document.addEventListener('click', function (e) {
        if (isOpen && !languageDropdown.contains(e.target) && !languageButton.contains(e.target)) {
          toggleDropdown();
        }
      });

      // Close on ESC
      document.addEventListener('keydown', function (e) {
        if (e.key === 'Escape' && isOpen) {
          toggleDropdown();
        }
      });

      languageDropdownInitialized = true;
      console.log('[Header] ✅ Language dropdown initialized successfully');
    }

    // Scroll effect is handled by the HeaderScroll.astro Island.
    // Inline scroll logic was removed to avoid duplication and conflicts.

    // Initialize all modules
    try {
      initMobileMenu();
      initLanguageDropdown();
      // Scroll effect handled by HeaderScroll.astro
      console.log('[Header] 🎉 All header functionality initialized successfully');
    } catch (error) {
      console.error('[Header] ❌ Failed to initialize header scripts:', error);
    }
  }

  // Initialize all header scripts when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeHeaderScripts);
  } else {
    initializeHeaderScripts();
  }
  // Re-initialize after Astro view transitions
  document.addEventListener('astro:after-swap', initializeHeaderScripts);
</script>

<style>
  /* Styles für die Header-Animation - wichtig: Spezifischere Selektoren verwenden */
  #site-header.header-visible {
    transform: translateY(0);
    opacity: 1;
    pointer-events: auto;
  }

  #site-header.header-hidden {
    transform: translateY(-100%);
    opacity: 0;
    pointer-events: none;
  }

  /* === OPTIMIZATION 2: Smooth CSS transitions === */
  #site-header {
    /* Explicit transitions for show/hide animations */
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1),
                opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1),
                background-color 0.3s ease-out,
                backdrop-filter 0.3s ease-out,
                box-shadow 0.3s ease-out,
                border-color 0.3s ease-out;
  }

  /* === OPTIMIZATION 3: will-change only on interaction === */
  #site-header:hover,
  #site-header.header-transitioning {
    will-change: transform, opacity;
  }

  /* Glassmorphism effect */

  \n/* Focus styles for better keyboard navigation */
  a:focus-visible,
  button:focus-visible,
  [role="menuitem"]:focus-visible {
    outline: 2px solid #10b981;
    outline-offset: 2px;
    border-radius: 0.25rem;
  }
</style>
<style>
  /* High contrast mode support */
  @media (forced-colors: active) {
    a:focus-visible,
    button:focus-visible,
    [role='menuitem']:focus-visible {
      outline: 2px solid Highlight !important;
      outline-offset: 2px;
    }
  }
</style>
<!-- HeaderScroll-Komponente für Scroll-Effekt -->
<HeaderScroll />
