---
// src/layouts/BaseLayout.astro
import Header from '@/components/Header.astro';
import SkipLink from '@/components/SkipLink.astro';
import Footer from '@/components/Footer.astro';
import ThemeProvider from '@/components/ThemeProvider.astro';

interface Props {
  title: string;
  description?: string;
  ogImage?: string;
  canonical?: string;
  structuredData?: any;
  image?: string;
  type?: string;
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  section?: string;
  tags?: string[];
  hideNewsletter?: boolean;
}

const {
  title,
  description = 'Evolution Hub - Your AI-Powered SaaS Platform',
  ogImage,
  hideNewsletter
} = Astro.props;
---

<!DOCTYPE html>
<html lang={Astro.url.pathname.startsWith('/de/') ? 'de' : 'en'} class="h-full">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:title" content={`${title} | Evolution Hub`} />
    <meta property="og:description" content={description} />
    {ogImage && <meta property="og:image" content={ogImage} />}
     {Astro.props.canonical && <link rel="canonical" href={Astro.props.canonical} />}

    <title>{title} | Evolution Hub</title>

    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <!-- Scripts -->
    <script src="/scripts/mobileMenu.js" defer></script>

    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">

    <!-- AOS Animation Library CSS -->
    <!-- Defer loading of AOS CSS -->
    <link rel="preload" href="https://unpkg.com/aos@next/dist/aos.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <noscript><link rel="stylesheet" href="https://unpkg.com/aos@next/dist/aos.css"></noscript>


    <!-- Toastr Notification Library CSS -->
    <!-- Defer loading of Toastr CSS -->
    <link rel="preload" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <noscript><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css"></noscript>

    <!-- Cookie Consent CSS -->
    <!-- Defer loading of Cookie Consent CSS -->
    <link rel="preload" href="https://cdn.jsdelivr.net/npm/cookieconsent@3/build/cookieconsent.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <noscript><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cookieconsent@3/build/cookieconsent.min.css"></noscript>


    <!-- Global CSS -->
    <style is:global>
      @import '@/styles/global.css';

      /* Smooth transitions for theme changes */
      html {
        @apply transition-colors duration-200;
      }
    </style>
  </head>

  <body class="min-h-screen bg-sky-50 dark:bg-slate-900 text-slate-800 dark:text-slate-200 flex flex-col overflow-x-hidden">
      <ThemeProvider />
      <SkipLink />
      <Header />
      <main id="main-content" class="flex-grow focus:outline-none" tabindex="-1">
        <slot />
      </main>

      <Footer hideNewsletter={hideNewsletter} />

    <script>
      declare const AOS: any;
      declare const toastr: any;

      const initSmoothScrolling = (): void => {
        document.querySelectorAll<HTMLAnchorElement>('a[href^="#"]').forEach((anchor) => {
          anchor.addEventListener('click', (e: Event) => {
            e.preventDefault();

            const targetId = anchor.getAttribute('href');
            if (!targetId) return;

            const targetElement = document.querySelector(targetId);
            if (!targetElement) return;

            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });

            if (history.pushState) {
              history.pushState(null, '', targetId);
            } else {
              location.hash = targetId;
            }
          });
        });
      };

      const initLibraries = () => {
        AOS.init({
          once: true,
          duration: 700,
        });

        toastr.options = {
          "closeButton": true,
          "progressBar": true,
          "positionClass": "toast-bottom-right",
        };
      };

      const initApp = () => {
        initSmoothScrolling();
        initLibraries();
      };

      // Verwende DOMContentLoaded statt astro:page-load zur Vermeidung des 'Astro is not defined' Fehlers
      document.addEventListener('DOMContentLoaded', initApp);
      
      // Führe initApp auch sofort aus, falls DOM bereits geladen ist
      if (document.readyState === 'loading') {
        // DOM ist noch am Laden, Event-Listener wird ausgeführt
      } else {
        // DOM ist bereits geladen, führe initApp sofort aus
        initApp();
      }

      if (import.meta.hot) {
        import.meta.hot.accept();
      }
    </script>
    <!-- Cookie Consent JS -->
    <script src="https://cdn.jsdelivr.net/npm/cookieconsent@3/build/cookieconsent.min.js" defer></script>
<!-- Cookie Consent Configuration -->
    <script type="module">
      // Die `Astro`-Objektvariable ist in Astro-Modulskripten verfügbar.
      const currentPathname = Astro.url.pathname;
      // Setzt die Sprache basierend auf dem Pfad
      const lang = currentPathname.startsWith('/de/') ? 'de' : 'en';

      window.CookieConsent.run({
        // Konfiguration für die Sprache
        language: lang,

        // Definition der Cookie-Kategorien
        categories: {
          necessary: {
            label: 'Notwendig', // Text für die Kategorie
            description: 'Diese Cookies sind für den Betrieb der Webseite essenziell.', // Beschreibung der Kategorie
            checked: true, // Notwendige Cookies sind standardmäßig aktiviert und können nicht deaktiviert werden
          },
          analytics: {
            label: 'Analyse',
            description: 'Diese Cookies ermöglichen uns, die Seitennutzung zu analysieren, um Ihr Erlebnis zu verbessern.',
            checked: false, // Analyse-Cookies sind standardmäßig deaktiviert
          },
          marketing: {
            label: 'Marketing',
            description: 'Diese Cookies werden verwendet, um personalisierte Werbung basierend auf Ihren Interessen anzuzeigen.',
            checked: false, // Marketing-Cookies sind standardmäßig deaktiviert
          },
        },

        // GUI-Optionen für das Benutzererlebnis
        guiOptions: {
          consentFirstInput: true, // Zeigt das Banner sofort beim ersten Laden der Seite an
        },

        // Konfiguration für das Sparformular
        saveForm: {
          enabled: true, // Aktiviert den "Speichern"-Button im Cookie-Banner
        },

        // Designanpassungen
        themeColors: {
          consentButton: '#3b82f6', // Akzeptieren-Button (z.B. Tailwind's blue-500)
          secondaryButton: '#6b7280', // Ablehnen-Button (z.B. Tailwind's gray-500)
          border1: '#e5e7eb', // Rahmen des Banners (z.B. Tailwind's border-gray-200)
        },
        // Weitere Designoptionen können hier hinzugefügt werden, falls erforderlich.
      });
    </script>
<script>
  interface CookieConsentEvent extends Event {
    detail: {
      analytics?: boolean;
      marketing?: boolean;
    };
  }

  // Analytics Manager initialisieren
  import { initializeAnalytics, trackScrollDepth, trackTimeOnPage } from '@/lib/analytics';
  
  let analytics;
  let timeOnPageStart = Date.now();
  let maxScrollDepth = 0;
  let scrollDepthTracked = new Set();
  
  // Analytics beim Laden der Seite initialisieren
  analytics = initializeAnalytics();
  
  // Cookie Consent Integration
  document.addEventListener('cookieconsent:userpreferencesset', function(event: Event) {
    const cookieEvent = event as CookieConsentEvent;
    
    if (cookieEvent.detail.analytics) {
      console.log('✅ Analytics cookies accepted - enabling tracking');
      
      // Page-View-Tracking nach Consent
      analytics?.trackPage(document.title, {
        page_type: 'blog',
        consent_given: true
      });
      
      // Scroll-Depth-Tracking aktivieren
      setupScrollTracking();
      
      // Time-on-Page-Tracking aktivieren
      setupTimeTracking();
    }
    
    if (cookieEvent.detail.marketing) {
      console.log('✅ Marketing cookies accepted - enabling retargeting');
      
      // Facebook Pixel laden (falls konfiguriert)
      if (typeof window !== 'undefined' && window.fbq) {
        window.fbq('consent', 'grant');
        window.fbq('track', 'PageView');
      }
      
      // LinkedIn Insight Tag aktivieren
      if (typeof window !== 'undefined' && window._linkedin_data_partner_ids) {
        const linkedinScript = document.createElement('script');
        linkedinScript.src = 'https://snap.licdn.com/li.lms-analytics/insight.min.js';
        document.head.appendChild(linkedinScript);
      }
    }
  });
  
  // Scroll-Depth-Tracking Setup
  function setupScrollTracking() {
    let throttleTimer = null;
    
    window.addEventListener('scroll', () => {
      if (throttleTimer !== null) return;
      
      throttleTimer = setTimeout(() => {
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        const docHeight = document.documentElement.scrollHeight - window.innerHeight;
        const scrollPercent = Math.round((scrollTop / docHeight) * 100);
        
        // Track bei 25%, 50%, 75%, 90% Scroll-Depth
        const milestones = [25, 50, 75, 90];
        milestones.forEach(milestone => {
          if (scrollPercent >= milestone && !scrollDepthTracked.has(milestone)) {
            trackScrollDepth(milestone);
            scrollDepthTracked.add(milestone);
          }
        });
        
        maxScrollDepth = Math.max(maxScrollDepth, scrollPercent);
        throttleTimer = null;
      }, 100);
    });
  }
  
  // Time-on-Page-Tracking Setup
  function setupTimeTracking() {
    // Track bei Seitenverlassen
    window.addEventListener('beforeunload', () => {
      const timeSpent = Math.round((Date.now() - timeOnPageStart) / 1000);
      if (timeSpent > 10) { // Nur bei mindestens 10 Sekunden tracken
        trackTimeOnPage(timeSpent);
      }
    });
    
    // Track bei Tab-Wechsel (falls User zurückkommt)
    document.addEventListener('visibilitychange', () => {
      if (document.visibilityState === 'hidden') {
        const timeSpent = Math.round((Date.now() - timeOnPageStart) / 1000);
        if (timeSpent > 30) {
          trackTimeOnPage(timeSpent);
        }
      } else {
        timeOnPageStart = Date.now(); // Reset bei Rückkehr
      }
    });
  }
  
  // Initial Page-View (falls bereits Consent vorhanden)
  setTimeout(() => {
    if (analytics && typeof window !== 'undefined') {
      analytics.trackPage(document.title, {
        page_type: window.location.pathname.startsWith('/blog') ? 'blog' : 'page',
        initial_load: true
      });
    }
  }, 1000);
</script>
  </body>
</html>
