---
// src/layouts/BaseLayout.astro
import Header from '@/components/Header.astro';
import { getLocale } from '@/lib/i18n';
import { getSEOData } from '@/lib/seo';
import SkipLink from '@/components/SkipLink.astro';
import Footer from '@/components/Footer.astro';
import ThemeProvider from '@/components/ThemeProvider.astro';
import AOSCoordinator from '@/components/scripts/AOSCoordinator.astro';
import Toaster from '@/components/Toaster';

interface Props {
  title: string;
  description?: string;
  ogImage?: string;
  canonical?: string;
  structuredData?: any;
  image?: string;
  type?: string;
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  section?: string;
  tags?: string[];
  hideNewsletter?: boolean;
}

const {
  title: customTitle,
  description: customDescription,
  ogImage: customOgImage,
  hideNewsletter
} = Astro.props;

// Get locale from URL
const locale = getLocale(Astro.url.pathname);

// Get SEO data for the current locale
const seoData = getSEOData(locale);

// Use custom props if provided, otherwise use SEO data
const title = customTitle || seoData.title;
const description = customDescription || seoData.description;
const ogImage = customOgImage || seoData.ogImage;
---

<!DOCTYPE html>
<html lang={getLocale(Astro.url.pathname)} class="h-full">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:title" content={`${title} | Evolution Hub`} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImage} />
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={`${title} | Evolution Hub`} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={ogImage} />
    
    {Astro.props.canonical && <link rel="canonical" href={Astro.props.canonical} />}
    
    <!-- hreflang links for SEO -->
    <link rel="alternate" hreflang="de" href={`${Astro.url.origin}/de${Astro.url.pathname.replace(/^\/(de|en)/, '')}`} />
    <link rel="alternate" hreflang="en" href={`${Astro.url.origin}/en${Astro.url.pathname.replace(/^\/(de|en)/, '')}`} />
    <link rel="alternate" hreflang="x-default" href={`${Astro.url.origin}${Astro.url.pathname.replace(/^\/(de|en)/, '')}`} />

    <title>{title} | Evolution Hub</title>

    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <!-- Scripts -->

    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Preload critical CSS -->
    <!-- Global CSS wird √ºber @import in style-Block geladen -->
    <!-- AOS CSS wird √ºber NPM-Import geladen -->
    <link rel="preload" href="https://cdn.jsdelivr.net/npm/cookieconsent@3/build/cookieconsent.min.css" as="style">

    <!-- AOS Animation Library wird √ºber NPM und script-coordinator geladen -->


    <!-- Cookie Consent CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cookieconsent@3/build/cookieconsent.min.css">

    <!-- JSON-LD Schema -->
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "WebPage",
        "name": `${title} | Evolution Hub`,
        "description": description,
        "inLanguage": locale
      }
    </script>

    <!-- AOS CSS via CDN (build-compatible, keine NPM-Imports) -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.css">

    <!-- Global CSS -->
    <style is:global>
      @import '@/styles/global.css';

      /* Smooth transitions for theme changes */
      html {
        @apply transition-colors duration-200;
      }
    </style>
  </head>

  <body class="min-h-screen bg-sky-50 dark:bg-slate-900 text-slate-800 dark:text-slate-200 flex flex-col overflow-x-hidden">
      <ThemeProvider />
      <SkipLink />
      <Header />
      <main id="main-content" class="flex-grow focus:outline-none" tabindex="-1">
        <slot />
      </main>

      <Footer hideNewsletter={hideNewsletter} />
      <AOSCoordinator />
      <Toaster client:idle />

    <script>
      const initSmoothScrolling = (): void => {
        document.querySelectorAll<HTMLAnchorElement>('a[href^="#"]').forEach((anchor) => {
          anchor.addEventListener('click', (e: Event) => {
            e.preventDefault();

            const targetId = anchor.getAttribute('href');
            if (!targetId) return;

            const targetElement = document.querySelector(targetId);
            if (!targetElement) return;

            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });

            if (history.pushState) {
              history.pushState(null, '', targetId);
            } else {
              location.hash = targetId;
            }
          });
        });
      };

      const initLibraries = () => {
        // No third-party init here. Sonner Toaster is mounted as a React Island.
      };

      const initApp = () => {
        initSmoothScrolling();
        initLibraries();
      };

      // Verwende DOMContentLoaded statt astro:page-load zur Vermeidung des 'Astro is not defined' Fehlers
      document.addEventListener('DOMContentLoaded', initApp);
      
      // F√ºhre initApp auch sofort aus, falls DOM bereits geladen ist
      if (document.readyState === 'loading') {
        // DOM ist noch am Laden, Event-Listener wird ausgef√ºhrt
      } else {
        // DOM ist bereits geladen, f√ºhre initApp sofort aus
        initApp();
      }

      if (import.meta.hot) {
        import.meta.hot.accept();
      }
    </script>
    <!-- Cookie Consent JS -->
    <script src="https://cdn.jsdelivr.net/npm/cookieconsent@3/build/cookieconsent.min.js" defer></script>
<!-- Cookie Consent Configuration -->
    <script define:vars={{ locale }}>
      // Saubere CookieConsent-Integration basierend auf Astro-Pattern
      document.addEventListener('DOMContentLoaded', function() {
        // Warten bis CookieConsent geladen ist
        function initCookieConsent() {
          if (window.CookieConsent) {
            window.CookieConsent.run({
              language: locale,
              
              categories: {
                necessary: {
                  label: 'Notwendig',
                  description: 'Diese Cookies sind f√ºr den Betrieb der Webseite essenziell.',
                  checked: true,
                },
                analytics: {
                  label: 'Analyse', 
                  description: 'Diese Cookies erm√∂glichen uns, die Seitennutzung zu analysieren, um Ihr Erlebnis zu verbessern.',
                  checked: false,
                },
                marketing: {
                  label: 'Marketing',
                  description: 'Diese Cookies werden verwendet, um personalisierte Werbung basierend auf Ihren Interessen anzuzeigen.',
                  checked: false,
                },
              },
              
              gui_options: {
                consent_modal: {
                  position: 'bottom left',
                  delay: 500,
                  position_scroll: false,
                },
              },
              
              theme: {
                primary: '#10b981',
                secondary: '#6b7280', 
                accept: '#059669',
                reject: '#6b7280',
                background: '#ffffff',
                text: '#1f2937',
                link: '#10b981',
                consentButton: '#3b82f6',
                secondaryButton: '#6b7280',
                border1: '#e5e7eb',
              },
            });
          } else {
            setTimeout(initCookieConsent, 100);
          }
        }
        
        initCookieConsent();
      });
    </script>
<!-- Analytics Module wird jetzt von AOSCoordinator gehandhabt -->
<script>
  // Analytics Module ohne ES6-Imports (inline implementation f√ºr build compatibility)
  
  interface CookieConsentEvent extends Event {
    detail: {
      analytics?: boolean;
      marketing?: boolean;
    };
  }

  async function initializeAnalyticsTracking(): Promise<void> {
    try {
      console.log('[Analytics] üöÄ Starting analytics initialization...');
      
      // Analytics Manager dynamisch laden
      const { initializeAnalytics, trackScrollDepth, trackTimeOnPage } = await import('@/lib/analytics');
      
      let analytics: any;
      let timeOnPageStart = Date.now();
      let maxScrollDepth = 0;
      let scrollDepthTracked = new Set<number>();
      
      // Analytics beim Laden der Seite initialisieren
      analytics = initializeAnalytics();
      
      // Event-Handler f√ºr Cleanup speichern
      let consentHandler: ((event: Event) => void) | null = null;
      let scrollHandler: (() => void) | null = null;
      let beforeUnloadHandler: (() => void) | null = null;
      let visibilityHandler: (() => void) | null = null;
      
      // Scroll-Depth-Tracking Setup
      function setupScrollTracking() {
        let throttleTimer: ReturnType<typeof setTimeout> | null = null;
        
        scrollHandler = () => {
          if (throttleTimer !== null) return;
          
          throttleTimer = setTimeout(() => {
            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
            const docHeight = document.documentElement.scrollHeight - window.innerHeight;
            const scrollPercent = Math.round((scrollTop / docHeight) * 100);
            
            // Track bei 25%, 50%, 75%, 90% Scroll-Depth
            const milestones = [25, 50, 75, 90];
            milestones.forEach(milestone => {
              if (scrollPercent >= milestone && !scrollDepthTracked.has(milestone)) {
                trackScrollDepth(milestone);
                scrollDepthTracked.add(milestone);
              }
            });
            
            maxScrollDepth = Math.max(maxScrollDepth, scrollPercent);
            throttleTimer = null;
          }, 100);
        };
        
        window.addEventListener('scroll', scrollHandler);
      }
      
      // Time-on-Page-Tracking Setup
      function setupTimeTracking() {
        // Track bei Seitenverlassen
        beforeUnloadHandler = () => {
          const timeSpent = Math.round((Date.now() - timeOnPageStart) / 1000);
          if (timeSpent > 10) { // Nur bei mindestens 10 Sekunden tracken
            trackTimeOnPage(timeSpent);
          }
        };
        window.addEventListener('beforeunload', beforeUnloadHandler);
        
        // Track bei Tab-Wechsel (falls User zur√ºckkommt)
        visibilityHandler = () => {
          if (document.visibilityState === 'hidden') {
            const timeSpent = Math.round((Date.now() - timeOnPageStart) / 1000);
            if (timeSpent > 30) {
              trackTimeOnPage(timeSpent);
            }
          } else {
            timeOnPageStart = Date.now(); // Reset bei R√ºckkehr
          }
        };
        document.addEventListener('visibilitychange', visibilityHandler);
      }
      
      // Cookie Consent Integration
      consentHandler = function(event: Event) {
        const cookieEvent = event as CookieConsentEvent;
        
        if (cookieEvent.detail.analytics) {
          console.log('[Analytics] ‚úÖ Analytics cookies accepted - enabling tracking');
          
          // Page-View-Tracking nach Consent
          analytics?.trackPage(document.title, {
            page_type: 'blog',
            consent_given: true
          });
          
          // Scroll-Depth-Tracking aktivieren
          setupScrollTracking();
          
          // Time-on-Page-Tracking aktivieren
          setupTimeTracking();
        }
        
        if (cookieEvent.detail.marketing) {
          console.log('[Analytics] ‚úÖ Marketing cookies accepted - enabling retargeting');
          
          // Facebook Pixel laden (falls konfiguriert)
          if (typeof window !== 'undefined' && (window as any).fbq) {
            (window as any).fbq('consent', 'grant');
            (window as any).fbq('track', 'PageView');
          }
          
          // LinkedIn Insight Tag aktivieren
          if (typeof window !== 'undefined' && (window as any)._linkedin_data_partner_ids) {
            const linkedinScript = document.createElement('script');
            linkedinScript.src = 'https://snap.licdn.com/li.lms-analytics/insight.min.js';
            document.head.appendChild(linkedinScript);
          }
        }
      };
      
      document.addEventListener('cookieconsent:userpreferencesset', consentHandler);
      
      // Initial Page-View (falls bereits Consent vorhanden)
      setTimeout(() => {
        if (analytics && typeof window !== 'undefined') {
          analytics.trackPage(document.title, {
            page_type: window.location.pathname.startsWith('/blog') ? 'blog' : 'page',
            initial_load: true
          });
        }
      }, 1000);
      
      console.log('[Analytics] ‚úÖ Tracking module initialized successfully');
      
      // Cleanup global verf√ºgbar machen
      (window as any).analyticsCleanup = function() {
        if (consentHandler) {
          document.removeEventListener('cookieconsent:userpreferencesset', consentHandler);
        }
        if (scrollHandler) {
          window.removeEventListener('scroll', scrollHandler);
        }
        if (beforeUnloadHandler) {
          window.removeEventListener('beforeunload', beforeUnloadHandler);
        }
        if (visibilityHandler) {
          document.removeEventListener('visibilitychange', visibilityHandler);
        }
        console.log('[Analytics] üßπ Tracking module cleaned up');
      };
      
    } catch (error) {
      console.error('[Analytics] ‚ùå Failed to initialize analytics tracking:', error);
    }
  }

  // Initialize analytics when DOM is ready
  if (document.readyState !== 'loading') {
    initializeAnalyticsTracking();
  } else {
    document.addEventListener('DOMContentLoaded', initializeAnalyticsTracking);
  }

  // Cleanup on page unload
  window.addEventListener('beforeunload', () => {
    if ((window as any).analyticsCleanup) {
      (window as any).analyticsCleanup();
    }
  });
</script>
  </body>
</html>
