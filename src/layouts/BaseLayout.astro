---
// src/layouts/BaseLayout.astro
import Header from '@/components/Header.astro';
import { getLocale } from '@/lib/i18n';
import { getSEOData } from '@/lib/seo';
import SkipLink from '@/components/SkipLink.astro';
import Footer from '@/components/Footer.astro';
import ThemeProvider from '@/components/ThemeProvider.astro';
import AOSCoordinator from '@/components/scripts/AOSCoordinator.astro';
import AnalyticsCoordinator from '@/components/scripts/AnalyticsCoordinator.astro';
import Toaster from '@/components/Toaster';
import { ViewTransitions } from 'astro:transitions';

interface Props {
  title: string;
  description?: string;
  ogImage?: string;
  canonical?: string;
  structuredData?: any;
  image?: string;
  type?: string;
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  section?: string;
  tags?: string[];
  hideNewsletter?: boolean;
  enableAOS?: boolean;
  enableAnalytics?: boolean;
}

const {
  title: customTitle,
  description: customDescription,
  ogImage: customOgImage,
  hideNewsletter
} = Astro.props;

const { enableAOS = true, enableAnalytics = true } = Astro.props as Props;

// Get locale from URL
const locale = getLocale(Astro.url.pathname);

// Get SEO data for the current locale
const seoData = getSEOData(locale);

// Use custom props if provided, otherwise use SEO data
const title = customTitle || seoData.title;
const description = customDescription || seoData.description;
const ogImage = customOgImage || seoData.ogImage;
---

<!DOCTYPE html>
<html lang={getLocale(Astro.url.pathname)} class="h-full">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:title" content={`${title} | Evolution Hub`} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImage} />
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={`${title} | Evolution Hub`} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={ogImage} />
    
    {Astro.props.canonical && <link rel="canonical" href={Astro.props.canonical} />}
    
    <!-- hreflang links for SEO -->
    <link rel="alternate" hreflang="de" href={`${Astro.url.origin}/de${Astro.url.pathname.replace(/^\/(de|en)/, '')}`} />
    <link rel="alternate" hreflang="en" href={`${Astro.url.origin}/en${Astro.url.pathname.replace(/^\/(de|en)/, '')}`} />
    <link rel="alternate" hreflang="x-default" href={`${Astro.url.origin}${Astro.url.pathname.replace(/^\/(de|en)/, '')}`} />

    <title>{title} | Evolution Hub</title>

    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />

    <!-- Scripts -->

    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Preload critical CSS -->
    <!-- Global CSS wird über @import in style-Block geladen -->
    <!-- AOS CSS wird über NPM-Import geladen -->
    <link rel="preload" href="https://cdn.jsdelivr.net/npm/cookieconsent@3/build/cookieconsent.min.css" as="style">

    <!-- AOS Animation Library wird über NPM und script-coordinator geladen -->


    <!-- Cookie Consent CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cookieconsent@3/build/cookieconsent.min.css">

    <!-- JSON-LD Schema -->
    <script type="application/ld+json" nonce={Astro.locals.cspNonce}>
      {
        "@context": "https://schema.org",
        "@type": "WebPage",
        "name": `${title} | Evolution Hub`,
        "description": description,
        "inLanguage": locale
      }
    </script>

    {enableAOS && <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.css" />}

    <!-- Global CSS -->
    <style is:global>
      @import '@/styles/global.css';

      /* Smooth transitions for theme changes */
      html {
        @apply transition-colors duration-200;
      }
    </style>
    <!-- Astro View Transitions for SPA-like navigation -->
    <ViewTransitions />
  </head>

  <body class="min-h-screen bg-sky-50 dark:bg-slate-900 text-slate-800 dark:text-slate-200 flex flex-col overflow-x-hidden">
      <ThemeProvider />
      <SkipLink />
      <Header />
      <main id="main-content" class="flex-grow focus:outline-none" tabindex="-1">
        <slot />
      </main>

      <Footer locale={locale} hideNewsletter={hideNewsletter} />
      {enableAOS && <AOSCoordinator />}
      {enableAnalytics && <AnalyticsCoordinator />}
      <Toaster client:load />

    <script nonce={Astro.locals.cspNonce}>
      const initSmoothScrolling = () => {
        document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
          anchor.addEventListener('click', (e) => {
            e.preventDefault();

            const targetId = anchor.getAttribute('href');
            if (!targetId) return;

            const targetElement = document.querySelector(targetId);
            if (!targetElement) return;

            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });

            if (history.pushState) {
              history.pushState(null, '', targetId);
            } else {
              location.hash = targetId;
            }
          });
        });
      };

      const initLibraries = () => {
        // No third-party init here. Sonner Toaster is mounted as a React Island.
      };

      const initApp = () => {
        initSmoothScrolling();
        initLibraries();
      };

      // Verwende DOMContentLoaded statt astro:page-load zur Vermeidung des 'Astro is not defined' Fehlers
      document.addEventListener('DOMContentLoaded', initApp);
      
      // Führe initApp auch sofort aus, falls DOM bereits geladen ist
      if (document.readyState === 'loading') {
        // DOM ist noch am Laden, Event-Listener wird ausgeführt
      } else {
        // DOM ist bereits geladen, führe initApp sofort aus
        initApp();
      }

      if (import.meta.hot) {
        import.meta.hot.accept();
      }
    </script>
    <!-- Cookie Consent JS -->
    <script src="https://cdn.jsdelivr.net/npm/cookieconsent@3/build/cookieconsent.min.js" defer nonce={Astro.locals.cspNonce}></script>
<!-- Cookie Consent Configuration -->
    <script define:vars={{ locale }} nonce={Astro.locals.cspNonce}>
      // Saubere CookieConsent-Integration basierend auf Astro-Pattern
      document.addEventListener('DOMContentLoaded', function() {
        // Warten bis CookieConsent geladen ist
        function initCookieConsent() {
          if (window.CookieConsent) {
            window.CookieConsent.run({
              language: locale,
              
              categories: {
                necessary: {
                  label: 'Notwendig',
                  description: 'Diese Cookies sind für den Betrieb der Webseite essenziell.',
                  checked: true,
                },
                analytics: {
                  label: 'Analyse', 
                  description: 'Diese Cookies ermöglichen uns, die Seitennutzung zu analysieren, um Ihr Erlebnis zu verbessern.',
                  checked: false,
                },
                marketing: {
                  label: 'Marketing',
                  description: 'Diese Cookies werden verwendet, um personalisierte Werbung basierend auf Ihren Interessen anzuzeigen.',
                  checked: false,
                },
              },
              
              gui_options: {
                consent_modal: {
                  position: 'bottom left',
                  delay: 500,
                  position_scroll: false,
                },
              },
              
              theme: {
                primary: '#10b981',
                secondary: '#6b7280', 
                accept: '#059669',
                reject: '#6b7280',
                background: '#ffffff',
                text: '#1f2937',
                link: '#10b981',
                consentButton: '#3b82f6',
                secondaryButton: '#6b7280',
                border1: '#e5e7eb',
              },
            });
          } else {
            setTimeout(initCookieConsent, 100);
          }
        }
        
        initCookieConsent();
      });
    </script>
<!-- Analytics Runtime is loaded via <AnalyticsCoordinator /> -->
  </body>
</html>
