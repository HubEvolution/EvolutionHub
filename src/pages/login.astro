---
import AuthLayout from '@/layouts/AuthLayout.astro';
import Button from '@/components/ui/Button.astro';
import FormLabel from '@/components/ui/FormLabel.astro';
import Input from '@/components/ui/Input.astro';
import { getI18n } from '@/utils/i18n';
import { getLocale } from '@/lib/i18n';

const locale = getLocale(Astro.url.pathname);
const t = getI18n(locale);

const locals = Astro.locals as any;
if (locals.user) {
  return Astro.redirect('/dashboard');
}
---
<AuthLayout title={t('pages.login.title') ?? 'Login'}>
  <div class="relative p-6 rounded-2xl overflow-hidden bg-white dark:bg-gray-800/50 border border-gray-200 dark:border-white/10 shadow-sm">
    <h1 class="text-2xl font-bold text-center mb-6">{t('pages.login.form.heading') ?? 'Login to your Account'}</h1>
    <form method="POST" action="/api/auth/login">
      <div class="mb-4">
        <FormLabel for="email">{t('pages.login.form.fields.email.label') ?? 'Email'}</FormLabel>
        <Input type="email" id="email" name="email" required />
      </div>
      <div class="mb-4">
        <FormLabel for="password">{t('pages.login.form.fields.password.label') ?? 'Password'}</FormLabel>
        <Input type="password" id="password" name="password" required />
      </div>
      <div class="text-right mb-4">
        <a href="/forgot-password" class="text-emerald-600 hover:underline">{t('pages.login.form.forgot_password_link') ?? 'Forgot Password?'}</a>
      </div>
<!-- Turnstile entfernt -->
      <Button type="submit" className="w-full">{t('pages.login.form.submit_button') ?? 'Login'}</Button>
    </form>
    <p class="text-center mt-4 text-sm">
      {t('pages.login.form.no_account_prompt')} <a href="/register" class="text-emerald-600 hover:underline">{t('pages.login.form.register_link') ?? 'Register'}</a>
    </p>
  </div>
</AuthLayout>

<script type="module">
  (async () => {
    try {
      // Warte bis der Sonner-Toaster gemountet wurde, um verlorene Toasts zu vermeiden
      const waitForToaster = async (timeout = 4000) => {
        const start = Date.now();
        while (Date.now() - start < timeout) {
          if (document.querySelector('[data-sonner-toaster]')) return true;
          await new Promise((r) => setTimeout(r, 50));
        }
        return false;
      };

      const url = new URL(window.location.href);
      const params = url.searchParams;
      const hasAny = params.has('loggedOut') || params.has('success') || params.has('error');
      if (!hasAny) return;

      await waitForToaster();
      const { default: notify } = await import('@/lib/notify');

      const isGerman = window.location.pathname.startsWith('/de');

      const loggedOut = params.get('loggedOut');
      const success = params.get('success');
      const error = params.get('error');

      if (loggedOut === 'true') {
        notify.success(isGerman ? 'Erfolgreich abgemeldet.' : 'You have been logged out.');
      }

      if (success) {
        const message = isGerman ? 'Aktion erfolgreich abgeschlossen.' : 'Action completed successfully.';
        notify.success(message);
      }

      if (error) {
        const code = error;
        const message = isGerman ? `Anmeldung fehlgeschlagen (${code}).` : `Sign-in failed (${code}).`;
        notify.error(message);
      }

      // Clean known status params while preserving others (e.g., next)
      params.delete('loggedOut');
      params.delete('success');
      params.delete('error');
      const newQuery = params.toString();
      const newUrl = url.pathname + (newQuery ? `?${newQuery}` : '') + url.hash;
      window.history.replaceState({}, document.title, newUrl);
    } catch (e) {
      console.error('[Login] URL status handling failed:', e);
    }
  })();
</script>