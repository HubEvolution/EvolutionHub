---
// Import getCollection and CollectionEntry directly from 'astro:content' for accurate typing.
import { getCollection, type CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  // Fetch blog entries. Astro's getCollection('blog') returns a typed array
  // of CollectionEntry<'blog'>.
  // The previously observed TypeScript error "Der Parameter 'entry' weist implizit einen Typ 'any' auf"
  // indicated that TypeScript might have had trouble inferring the type of 'entry'
  // within the map function.
  const blogEntries = await getCollection('blog');
  
  // Explicitly type 'entry' as CollectionEntry<'blog'> in the map function
  // to ensure type safety and resolve any potential inference issues.
  return blogEntries.map((entry: CollectionEntry<'blog'>) => ({
    params: { slug: entry.slug }, props: { entry },
  }));
}
// Prerender deaktiviert, da Astro.request.headers im Code verwendet wird
export const prerender = false;
// Import BaseLayout using a relative path.
import BaseLayout from '@/layouts/BaseLayout.astro';
// Import blogService from its module. We no longer need to import BlogCollectionEntry from here
// as we are importing CollectionEntry directly from 'astro:content'.
import { blogService, type BlogCollectionEntry } from '@/lib/blog';
import BlogPostComponent from '@/components/BlogPost.astro';
import type { ProcessedBlogPost } from '../../content/types';
// Commented out CommentSection as it was removed earlier following user instructions.
// Commenting out the import for CommentSection as it's no longer used.
// import CommentSection from '@/components/comments/CommentSection.astro';

// Get slug from URL parameters
const { slug } = Astro.params;

if (!slug) {
  // It's better to return a 404 response directly if slug is missing.
  return new Response(null, { status: 404, statusText: 'Not Found' });
}

// Try to load the blog post
let postData: ProcessedBlogPost | null = null;
// To satisfy TypeScript, originalEntry should be typed as CollectionEntry<'blog'>.
// We are importing this type from '../../lib/blog' as `BlogCollectionEntry` for this purpose.
let originalEntry: BlogCollectionEntry | null = null; 
try {
  // Use the imported blogService instance directly.
  // This call expects getPostBySlug in lib/blog.ts to return an object with 'entry' (of type BlogCollectionEntry) and 'processedData'.
  const result = await blogService.getPostBySlug(slug);
  if (result) {
    originalEntry = result.entry;
    postData = result.processedData; // Use processed data for component props
  }
} catch (error) {
  console.error('Error loading blog post:', error);
  // Redirect to 404 if there's an error loading the post
  return Astro.redirect('/404');
}

// If no post data or original entry found, redirect to 404
if (!postData || !originalEntry) {
  // This check is important to ensure we have valid data before rendering.
  // If `getPostBySlug` returns undefined, we should redirect to a 404 page.
  return Astro.redirect('/404');
}

// Use the render method from the original entry to get the content component.
const { Content } = await originalEntry.render();

// Load related posts (based on tags and category)
// Initialize relatedPosts to an empty array to prevent potential errors if fetching fails.
let relatedPosts: ProcessedBlogPost[] = [];

// Check if postData is available before attempting to load related posts.
if (postData) { 
  try {
    // Fetch related posts, ensuring originalEntry is non-null.
    // Using a non-null assertion `!` for originalEntry, as it's checked above.
    const related = await blogService.getRelatedPosts(
      originalEntry!, 
      {
      limit: 3,
      includeDrafts: import.meta.env.DEV
    });

    // Process the related posts if the fetch was successful and returned an array.
    if (Array.isArray(related)) {
      // Filter the related posts to ensure they conform to ProcessedBlogPost structure.
      relatedPosts = related.filter((p): p is ProcessedBlogPost =>
        // Robust check for valid processed post structure
        p && typeof p === 'object' && typeof p.data === 'object' && p.data !== null && 'title' in p.data
      );
    }
  } catch (error) {
    // Log any errors during related post fetching and default to an empty array.
    console.error('Fehler beim Laden verwandter Beiträge:', error);
    relatedPosts = []; // Ensure relatedPosts is an empty array in case of error.
  }
}

// SEO Metadaten
const title = postData.data.title;
const description = postData.data.description || '';
const canonicalUrl = new URL(Astro.url.pathname, Astro.site);
// Ensure imageUrl is correctly formed
const imageUrl = postData.data.image?.src
  ? new URL(postData.data.image.src, Astro.site).toString()
  : new URL('/images/blog/default-og.jpg', Astro.site).toString();

// Refactored logic for dateModified
const datePublishedISO = new Date(postData.data.pubDate).toISOString();
const dateModifiedISO = postData.data.updatedDate
  ? new Date(postData.data.updatedDate).toISOString()
  : datePublishedISO; // Use publishedDate if updatedDate is missing

// Strukturierte Daten für SEO (Schema.org)
const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'BlogPosting',
  headline: title,
  description: description,
  image: imageUrl,
  author: {
    '@type': 'Person',
    name: Array.isArray(postData.data.author) ? postData.data.author[0] : postData.data.author?.name || 'EvolutionHub Team',
    url: 'https://evolution-hub.de/team' // Placeholder URL, adjust if specific author URLs exist
  },
  publisher: {
    '@type': 'Organization',
    name: 'EvolutionHub',
    logo: {
      '@type': 'ImageObject',
      url: new URL('/images/logo.png', Astro.site).toString()
    }
  },
  datePublished: datePublishedISO,
  dateModified: dateModifiedISO,
  mainEntityOfPage: {
    '@type': 'WebPage',
    '@id': canonicalUrl.toString()
  }
};
// Blog-Enhancements werden importfrei inline initialisiert (kein Astro.resolve)
---

<BaseLayout
  title={title}
  description={description}
  canonical={canonicalUrl.toString()}
  structuredData={structuredData}
  image={imageUrl}
  type="article"
  publishedTime={datePublishedISO}
  modifiedTime={dateModifiedISO}
  author={Array.isArray(postData.data.author) ? postData.data.author[0] : postData.data.author?.name || 'EvolutionHub Team'}
  section={postData.data.category}
  tags={postData.data.tags}
>
  <article class="bg-white dark:bg-gray-900 py-12 sm:py-16">
    <div class="mx-auto max-w-7xl px-6 lg:px-8">
      <div class="mx-auto max-w-3xl" data-aos="fade-up" data-aos-duration="700">
        {/* Blog-Post-Komponente rendern */}
        <BlogPostComponent post={postData} relatedPosts={relatedPosts}>
          <Content />
        </BlogPostComponent>

        {/* Kommentarbereich */}
        {/* CommentSection is removed as per earlier user instructions */}
        {/* <CommentSection postId={slug} /> Is removed because the component was deleted */}
      </div>
    </div>
  </article>

  {/* Newsletter-Anmeldung */}
  <div class="bg-gray-50 dark:bg-gray-800 py-16">
    <div class="mx-auto max-w-7xl px-6 lg:px-8">
      <div class="mx-auto max-w-2xl text-center">
        <h2 class="text-2xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-3xl" data-aos="fade-up" data-aos-duration="650">
          Bleiben Sie auf dem Laufenden
        </h2>
        <p class="mx-auto mt-4 max-w-xl text-gray-600 dark:text-gray-300" data-aos="fade-up" data-aos-delay="100" data-aos-duration="650">
          Abonnieren Sie unseren Newsletter, um über neue Artikel, Tipps und Neuigkeiten informiert zu werden.
        </p>
        <form class="mt-8 sm:mx-auto sm:flex sm:max-w-lg" data-aos="fade-up" data-aos-delay="150" data-aos-duration="650">
          <div class="min-w-0 flex-1">
            <label for="email" class="sr-only">E-Mail-Adresse</label>
            <input
              id="email"
              type="email"
              placeholder="Ihre E-Mail-Adresse"
              class="block w-full rounded-md border-0 px-4 py-3 text-base text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2"
              required
            />
          </div>
          <div class="mt-4 sm:mt-0 sm:ml-3">
            <button
              type="submit"
              class="block w-full rounded-md bg-emerald-600 px-6 py-3 text-base font-medium text-white hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2"
            >
              Jetzt anmelden
            </button>
          </div>
        </form>
        <p class="mt-3 text-sm text-gray-500 dark:text-gray-400" data-aos="fade-up" data-aos-delay="250" data-aos-duration="600">
          Wir geben Ihre Daten nicht weiter. Sie können sich jederzeit wieder abmelden.
        </p>
      </div>
    </div>
  </div>
  <script is:inline nonce={Astro.locals.cspNonce}>
    (function () {
      'use strict';

      // Idempotenz-Flag
      let initialized = false;

      function enhanceLazyImages() {
        try {
          const images = document.querySelectorAll('article img:not([loading])');
          images.forEach((img) => {
            if ('loading' in img) {
              img.loading = 'lazy';
            }
            img.setAttribute('loading', 'lazy');
          });
        } catch (err) { try { console.warn('[BlogEnhancements] enhanceLazyImages failed', err); } catch (_) {} }
      }

      function enhanceFootnotes() {
        try {
          const footnotes = document.querySelectorAll('a[href^="#fn"], a[href^="#ref"]');
          footnotes.forEach((a) => {
            if (a.hasAttribute('data-footnote-enhanced')) return;
            a.setAttribute('data-footnote-enhanced', 'true');
            a.setAttribute('data-tooltip', 'Zum entsprechenden Absatz springen');
            a.classList.add('underline', 'decoration-dotted', 'decoration-gray-400', 'underline-offset-4');
          });
        } catch (err) { try { console.warn('[BlogEnhancements] enhanceFootnotes failed', err); } catch (_) {} }
      }

      function init() {
        if (initialized) return;
        if (typeof document === 'undefined') return;
        enhanceLazyImages();
        enhanceFootnotes();
        initialized = true;
      }

      function cleanup() {
        if (!initialized) return;
        initialized = false;
      }

      // Global für externes Cleanup verfügbar machen
      window.blogPostEnhancementsCleanup = cleanup;

      // DOM ready
      const start = () => init();
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', start);
      } else {
        start();
      }

      // SPA-Navigation über Astro Events
      document.addEventListener('astro:page-load', () => {
        initialized = false;
        init();
      });

      // Cleanup vor Seitenwechsel
      window.addEventListener('beforeunload', () => {
        try { cleanup(); } catch (_) {}
      });
    })();
  </script>
</BaseLayout>
