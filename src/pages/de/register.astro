---
import AuthLayout from '@/layouts/AuthLayout.astro';
import AuthStatusNotifier from '@/components/scripts/AuthStatusNotifier';
import Button from '@/components/ui/Button.astro';
import FormLabel from '@/components/ui/FormLabel.astro';
import Input from '@/components/ui/Input.astro';
import { getI18n } from '@/utils/i18n';

import { getLocale } from '@/lib/i18n';
const locale = getLocale(Astro.url.pathname);
const t = getI18n(locale);

const locals = Astro.locals as any;
if (locals.user) {
  return Astro.redirect('/dashboard');
}
---
<AuthLayout title={t('pages.register.title') ?? 'Konto erstellen'}>
  <div class="relative p-6 rounded-2xl overflow-hidden bg-white dark:bg-gray-800/50 border border-gray-200 dark:border-white/10 shadow-sm">
    <h1 class="text-2xl font-bold text-center mb-6">{t('pages.register.form.heading') ?? 'Erstellen Sie Ihr Konto'}</h1>
    <form id="register-form" method="POST" action="/api/auth/register">
      <input type="hidden" name="locale" value="de" />
      <div class="mb-4">
        <FormLabel for="name">{t('pages.register.form.fields.name.label') ?? 'Name'}</FormLabel>
        <Input type="text" id="name" name="name" required />
      </div>
      <div class="mb-4">
        <FormLabel for="username">{t('pages.register.form.fields.username.label') ?? 'Benutzername'}</FormLabel>
        <Input type="text" id="username" name="username" required />
      </div>
      <div class="mb-4">
        <FormLabel for="email">{t('pages.register.form.fields.email.label') ?? 'E-Mail'}</FormLabel>
        <Input type="email" id="email" name="email" required />
      </div>
      <div class="mb-6">
        <FormLabel for="password">{t('pages.register.form.fields.password.label') ?? 'Passwort'}</FormLabel>
        <Input type="password" id="password" name="password" required />
      </div>
      <div id="error-message" class="text-red-500 text-center mb-4 hidden"></div>
      <!-- Turnstile entfernt -->
      <Button type="submit" className="w-full">
        {t('pages.register.form.submit_button') ?? 'Konto erstellen'}
      </Button>
    </form>
    <p class="text-center mt-4 text-sm">
      {t('pages.register.form.already_have_account_prompt')} <a href="/de/login" class="text-emerald-600 hover:underline">{t('pages.register.form.login_link') ?? 'Anmelden'}</a>
    </p>
    <AuthStatusNotifier mode="register" client:load />
  </div>
</AuthLayout>

<script>
  const form = document.getElementById('register-form');
  const errorMessageDiv = document.getElementById('error-message');

  if (form instanceof HTMLFormElement) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      if (errorMessageDiv) {
        errorMessageDiv.classList.add('hidden');
        errorMessageDiv.textContent = '';
      }

      const formData = new FormData(form);

      try {
        const response = await fetch('/api/auth/register', {
          method: 'POST',
          body: formData,
          credentials: 'same-origin',
        });

        // Server gibt Redirects zur√ºck (auch bei Fehlern).
        // Falls fetch dem Redirect folgt, setzen wir die URL manuell.
        if (response.redirected) {
          window.location.href = response.url;
          return;
        }

        if (response.ok) {
          window.location.href = '/dashboard';
        } else {
          const errorText = await response.text();
          if (errorMessageDiv) {
            errorMessageDiv.textContent = errorText || 'Es ist ein Fehler aufgetreten.';
            errorMessageDiv.classList.remove('hidden');
          }
        }
      } catch (error) {
        if (errorMessageDiv) {
          errorMessageDiv.textContent = 'Es ist ein unerwarteter Fehler aufgetreten.';
          errorMessageDiv.classList.remove('hidden');
        }
      }
    });
  }
</script>
