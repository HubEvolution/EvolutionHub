---
export const prerender = false;
import BaseLayout from '@/layouts/BaseLayout.astro';
import BulkActions from '@/components/admin/BulkActions';
import Card from '@/components/ui/Card';

type CommentModerationData = {
  success: boolean;
  data: {
    comments: Array<{
      id: string;
      content: string;
      author: {
        id: string;
        email: string;
        name?: string;
      };
      entityType: string;
      entityId: string;
      status: 'pending' | 'approved' | 'rejected' | 'flagged';
      createdAt: string;
      updatedAt: string;
      parentId?: string;
      reports?: Array<{
        id: string;
        reason: string;
        reportedBy: string;
        createdAt: string;
      }>;
    }>;
    stats: {
      total: number;
      pending: number;
      approved: number;
      rejected: number;
      flagged: number;
    };
  };
};

type FetchCommentsResult = { ok: boolean; status: number; data: CommentModerationData | null };

async function fetchComments() {
  try {
    const base = new URL('/api/admin/comments', Astro.url);
    const q = new URL(Astro.url).searchParams;
    if (q.get('status')) base.searchParams.set('status', String(q.get('status')));
    if (q.get('entityType')) base.searchParams.set('entityType', String(q.get('entityType')));
    if (q.get('entityId')) base.searchParams.set('entityId', String(q.get('entityId')));
    if (q.get('authorId')) base.searchParams.set('authorId', String(q.get('authorId')));
    base.searchParams.set('includeReports', 'true');
    base.searchParams.set('limit', String(q.get('limit') || '50'));
    base.searchParams.set('offset', String(q.get('offset') || '0'));
    const url = base.toString();
    const res = await fetch(url, {
      headers: {
        cookie: Astro.request.headers.get('cookie') ?? '',
      },
      cache: 'no-store',
    });

    if (!res.ok) {
      return { ok: false, status: res.status, data: null } as FetchCommentsResult;
    }

    const data = (await res.json()) as CommentModerationData;
    return { ok: true, status: res.status, data } as FetchCommentsResult;
  } catch (e) {
    return { ok: false, status: 500, data: null } as FetchCommentsResult;
  }
}

const q = new URL(Astro.url).searchParams;
const commentsResult: FetchCommentsResult = await fetchComments();
// Normalize admin comments list: API returns data.comments as either Array or { comments, total, hasMore }
type AdminComment = CommentModerationData['data']['comments'][number];
const rawComments: unknown = commentsResult.ok && commentsResult.data?.success
  ? (commentsResult.data.data as unknown as Record<string, unknown>)?.comments
  : undefined;
let adminCommentsList: AdminComment[] = [];
let adminMeta: { total: number; hasMore: boolean } = { total: 0, hasMore: false };
if (Array.isArray(rawComments)) {
  adminCommentsList = rawComments as AdminComment[];
  adminMeta = { total: adminCommentsList.length, hasMore: false };
} else if (rawComments && typeof rawComments === 'object') {
  const obj = rawComments as Record<string, unknown>;
  const arr = obj.comments;
  if (Array.isArray(arr)) {
    adminCommentsList = arr as AdminComment[];
    const t = typeof obj.total === 'number' ? (obj.total as number) : 0;
    const hm = typeof obj.hasMore === 'boolean' ? (obj.hasMore as boolean) : false;
    adminMeta = { total: t, hasMore: hm };
  }
}
const adminLimit = Number(q.get('limit') || '50');
const adminOffset = Number(q.get('offset') || '0');

// Optional: fetch approved count for current filter (entityType + single entityId)
async function fetchApprovedCount() {
  try {
    const q = new URL(Astro.url).searchParams;
    const entityType = q.get('entityType');
    const entityId = q.get('entityId');
    if (!entityType || !entityId) return null;
    const url = new URL('/api/comments/count', Astro.url);
    url.searchParams.set('entityType', entityType);
    url.searchParams.append('entityId', entityId);
    const res = await fetch(url.toString(), { cache: 'no-store' });
    if (!res.ok) return null;
    const json: unknown = await res.json();
    // expected: { success: true, data: { entityId, count } } OR batched shape
    if (json && typeof json === 'object') {
      const data = (json as { data?: unknown }).data;
      if (data && typeof data === 'object') {
        const count = (data as { count?: unknown }).count;
        return typeof count === 'number' ? count : null;
      }
    }
    return null;
  } catch {
    return null;
  }
}
const approvedCountForFilter = await fetchApprovedCount();

// Optional: fetch schema diagnostics (legacy vs modern) for admin awareness
async function fetchSchemaDiag() {
  try {
    const url = new URL('/api/comments', Astro.url);
    url.searchParams.set('debug', '1');
    const res = await fetch(url.toString(), { cache: 'no-store' });
    if (!res.ok) return null;
    const json: unknown = await res.json();
    if (json && typeof json === 'object') {
      const data = (json as { data?: unknown }).data;
      if (data && typeof data === 'object') {
        const diag = (data as { diag?: unknown }).diag;
        return diag || null;
      }
    }
    return null;
  } catch {
    return null;
  }
}
const schemaDiag = await fetchSchemaDiag();

// Stabilize types for stats rendering to satisfy TS in Astro context
const stats =
  commentsResult.ok && commentsResult.data?.success
    ? commentsResult.data.data.stats
    : { total: 0, pending: 0, approved: 0, rejected: 0, flagged: 0 };
---

<BaseLayout title="Kommentar-Moderation" description="Admin-Interface für Kommentar-Moderation">
  <main class="min-h-screen bg-transparent py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-7xl mx-auto">
      <div class="flex items-center justify-between mb-8">
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Kommentar-Moderation</h1>
        <div class="flex gap-2 sm:gap-3 flex-wrap justify-end">
          <a
            href={new URL('/api/comments', Astro.url).toString() + '?debug=1'}
            target="_blank"
            rel="noopener"
            class="inline-flex items-center px-3 py-2 border border-gray-300 rounded-md text-sm text-gray-700 bg-white hover:bg-gray-50"
          >
            Schema-Diagnose
          </a>
          {
            q.get('entityType') && q.get('entityId') && (
              <a
                href={(function () {
                  const u = new URL('/api/comments/count', Astro.url);
                  u.searchParams.set('entityType', q.get('entityType')!);
                  u.searchParams.append('entityId', q.get('entityId')!);
                  return u.toString();
                })()}
                target="_blank"
                rel="noopener"
                class="inline-flex items-center px-3 py-2 border border-gray-300 rounded-md text-sm text-gray-700 bg-white hover:bg-gray-50"
              >
                Approved-Count prüfen
              </a>
            )
          }
          <BulkActions client:idle />
          <button
            id="refresh-btn"
            class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
              ></path>
            </svg>
            Aktualisieren
          </button>
        </div>
      </div>

      <Card as="section" className="p-6 mb-6">
        <form method="get" class="grid grid-cols-1 md:grid-cols-5 gap-4">
          <div>
            <label for="status" class="block text-sm font-medium text-gray-700 dark:text-gray-300"
              >Status</label
            >
            <select
              id="status"
              name="status"
              value={q.get('status') || ''}
              class="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 shadow-sm focus:border-emerald-500 focus:ring-emerald-500"
            >
              <option value="">Alle</option>
              <option value="pending">Pending</option>
              <option value="approved">Approved</option>
              <option value="rejected">Rejected</option>
              <option value="flagged">Flagged</option>
            </select>
          </div>
          <div>
            <label
              for="entityType"
              class="block text-sm font-medium text-gray-700 dark:text-gray-300">Entity Type</label
            >
            <select
              id="entityType"
              name="entityType"
              value={q.get('entityType') || ''}
              class="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 shadow-sm focus:border-emerald-500 focus:ring-emerald-500"
            >
              <option value="">Alle</option>
              <option value="blog_post">Blog</option>
              <option value="project">Project</option>
              <option value="general">General</option>
            </select>
          </div>
          <div>
            <label for="entityId" class="block text-sm font-medium text-gray-700 dark:text-gray-300"
              >Entity ID</label
            >
            <input
              id="entityId"
              name="entityId"
              type="text"
              value={q.get('entityId') || ''}
              class="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 shadow-sm focus:border-emerald-500 focus:ring-emerald-500"
            />
          </div>
          <div>
            <label for="authorId" class="block text-sm font-medium text-gray-700 dark:text-gray-300"
              >Autor ID</label
            >
            <input
              id="authorId"
              name="authorId"
              type="text"
              value={q.get('authorId') || ''}
              class="mt-1 block w-full rounded-md border-gray-300 dark:border-emerald-600 bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 shadow-sm focus:border-emerald-500 focus:ring-emerald-500"
            />
          </div>
          <div class="flex items-end">
            <button
              type="submit"
              class="inline-flex items-center px-4 py-2 rounded-md bg-emerald-600 text-white hover:bg-emerald-700"
              >Filtern</button
            >
          </div>
        </form>
      </Card>

      {
        commentsResult.ok && commentsResult.data?.success ? (
          <div class="space-y-8">
            {/* Statistiken */}
            <Card as="section" className="p-6">
              <div class="mb-4 flex items-center justify-between">
                <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Übersicht</h2>
                {schemaDiag && (schemaDiag as { schema?: 'legacy' | 'modern' }).schema && (
                  <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-200">
                    Schema: {(schemaDiag as { schema?: string }).schema}
                  </span>
                )}
              </div>
              <div class="grid grid-cols-2 sm:grid-cols-5 gap-4 text-sm">
                <div class="text-center">
                  <div class="text-2xl font-bold text-gray-900 dark:text-white">{stats.total}</div>
                  <div class="text-gray-500 dark:text-gray-400">Gesamt</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold text-yellow-600">{stats.pending}</div>
                  <div class="text-gray-500 dark:text-gray-400">Ausstehend</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold text-green-600">{stats.approved}</div>
                  <div class="text-gray-500 dark:text-gray-400">Freigegeben</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold text-red-600">{stats.rejected}</div>
                  <div class="text-gray-500 dark:text-gray-400">Abgelehnt</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold text-orange-600">{stats.flagged}</div>
                  <div class="text-gray-500 dark:text-gray-400">Markiert</div>
                </div>
                {approvedCountForFilter !== null && (
                  <div class="text-center col-span-2 sm:col-span-5">
                    <div class="text-sm text-gray-700 dark:text-gray-300">
                      Genehmigte Kommentare für aktuellen Filter:{' '}
                      <span class="font-semibold">{approvedCountForFilter}</span>
                    </div>
                  </div>
                )}
              </div>
            </Card>

            {/* Kommentar-Liste */}
            <Card as="section" className="">
              <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Kommentare</h2>
              </div>

              {adminCommentsList.length > 0 ? (
                <div class="overflow-x-auto">
                  <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                    <thead class="bg-gray-50 dark:bg-gray-700">
                      <tr>
                        <th class="px-6 py-3">
                          <input
                            id="select-all"
                            type="checkbox"
                            class="h-4 w-4 text-emerald-600 border-gray-300 rounded"
                          />
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                          Kommentar
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                          Autor
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                          Status
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                          Entity
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                          Datum
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                          Aktionen
                        </th>
                      </tr>
                    </thead>
                    <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                      {adminCommentsList.map((comment: AdminComment) => (
                        <tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
                          <td class="px-6 py-4">
                            <input
                              type="checkbox"
                              class="comment-select h-4 w-4 text-emerald-600 border-gray-300 rounded"
                              data-comment-id={comment.id}
                            />
                          </td>
                          <td class="px-6 py-4">
                            <div class="max-w-xs">
                              <p
                                class="text-sm text-gray-900 dark:text-white truncate"
                                title={comment.content}
                              >
                                {comment.content}
                              </p>
                              {comment.reports && comment.reports.length > 0 && (
                                <div class="mt-1 flex items-center text-xs text-red-600">
                                  <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                    <path
                                      fill-rule="evenodd"
                                      d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                                      clip-rule="evenodd"
                                    />
                                  </svg>
                                  {comment.reports.length} Meldung
                                  {comment.reports.length !== 1 ? 'en' : ''}
                                </div>
                              )}
                            </div>
                          </td>
                          <td class="px-6 py-4">
                            <div class="text-sm text-gray-900 dark:text-white">
                              {comment.author.name || comment.author.email}
                            </div>
                            <div class="text-sm text-gray-500 dark:text-gray-400">
                              {comment.author.id}
                            </div>
                          </td>
                          <td class="px-6 py-4">
                            <span
                              class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                                comment.status === 'pending'
                                  ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'
                                  : comment.status === 'approved'
                                    ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                                    : comment.status === 'rejected'
                                      ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
                                      : 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200'
                              }`}
                            >
                              {comment.status === 'pending'
                                ? 'Ausstehend'
                                : comment.status === 'approved'
                                  ? 'Freigegeben'
                                  : comment.status === 'rejected'
                                    ? 'Abgelehnt'
                                    : 'Markiert'}
                            </span>
                          </td>
                          <td class="px-6 py-4">
                            <div class="text-sm text-gray-900 dark:text-white">
                              {comment.entityType}
                            </div>
                            <div
                              class="text-sm text-gray-500 dark:text-gray-400 truncate max-w-24"
                              title={comment.entityId}
                            >
                              {comment.entityId}
                            </div>
                          </td>
                          <td class="px-6 py-4 text-sm text-gray-500 dark:text-gray-400">
                            {new Date(comment.createdAt).toLocaleDateString('de-DE')}
                          </td>
                          <td class="px-6 py-4 text-sm font-medium">
                            <div class="flex space-x-2">
                              {comment.status === 'pending' && (
                                <>
                                  <button
                                    class="text-green-600 hover:text-green-900 dark:text-green-400 dark:hover:text-green-300"
                                    onclick={`moderateComment('${comment.id}', 'approve')`}
                                    title="Freigeben"
                                  >
                                    ✓
                                  </button>
                                  <button
                                    class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300"
                                    onclick={`moderateComment('${comment.id}', 'reject')`}
                                    title="Ablehnen"
                                  >
                                    ✗
                                  </button>
                                </>
                              )}
                              <button
                                class="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300"
                                onclick={`viewCommentDetails('${comment.id}')`}
                                title="Details"
                              >
                                👁
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              ) : (
                <div class="px-6 py-8 text-center">
                  <p class="text-gray-500 dark:text-gray-400">Keine Kommentare gefunden</p>
                </div>
              )}
            </Card>

            <section class="mt-6 flex items-center justify-between text-sm text-gray-600 dark:text-gray-300">
              <div>Gesamt: {adminMeta.total}</div>
              <div class="flex gap-2">
                {adminOffset > 0 && (
                  <a
                    href={(function () {
                      const u = new URL(Astro.url);
                      const prev = Math.max(0, adminOffset - adminLimit);
                      u.searchParams.set('offset', String(prev));
                      u.searchParams.set('limit', String(adminLimit));
                      return u.toString();
                    })()}
                    class="px-3 py-1 rounded border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700"
                  >
                    Vorherige
                  </a>
                )}
                {adminMeta.hasMore && (
                  <a
                    href={(function () {
                      const u = new URL(Astro.url);
                      const next = adminOffset + adminLimit;
                      u.searchParams.set('offset', String(next));
                      u.searchParams.set('limit', String(adminLimit));
                      return u.toString();
                    })()}
                    class="px-3 py-1 rounded border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700"
                  >
                    Nächste
                  </a>
                )}
              </div>
            </section>
          </div>
        ) : (
          <div class="bg-yellow-50 dark:bg-yellow-900/30 border border-yellow-200 dark:border-yellow-800 rounded-lg p-6">
            <p class="text-yellow-800 dark:text-yellow-200">
              {commentsResult.status === 401
                ? 'Bitte zuerst einloggen. Danach diese Seite neu laden.'
                : commentsResult.status === 403
                  ? 'Keine Berechtigung für die Kommentar-Moderation.'
                  : 'Kommentare konnten nicht geladen werden.'}
            </p>
          </div>
        )
      }
    </div>
  </main>

  <script>
    // Select-all behavior
    document.getElementById('select-all')?.addEventListener('change', (ev) => {
      const target = (ev?.target as HTMLInputElement | null);
      const checked = !!(target && target.checked);
      document.querySelectorAll('input.comment-select').forEach((el) => {
        if (el instanceof HTMLInputElement) {
          el.checked = checked;
        }
      });
    });

    function ensureCsrfToken(): string {
      try {
        const cookie = document.cookie || '';
        const m = cookie.match(/(?:^|; )csrf_token=([^;]+)/);
        if (m && m[1]) return decodeURIComponent(m[1]);
        const buf = new Uint8Array(16);
        (globalThis.crypto || window.crypto).getRandomValues(buf);
        const token = Array.from(buf)
          .map((b) => b.toString(16).padStart(2, '0'))
          .join('');
        const attrs = [
          'Path=/',
          'SameSite=Lax',
          typeof location !== 'undefined' && location.protocol === 'https:' ? 'Secure' : '',
        ]
          .filter(Boolean)
          .join('; ');
        document.cookie = `csrf_token=${encodeURIComponent(token)}; ${attrs}`;
        return token;
      } catch {
        return '';
      }
    }

    function moderateComment(
      commentId: string,
      action: 'approve' | 'reject' | 'flag' | 'hide' | 'unhide'
    ) {
      const isApprove = action === 'approve';
      const reason = prompt('Grund (optional):', '') ?? '';
      if (confirm(`Kommentar wirklich ${isApprove ? 'freigeben' : 'ablehnen'}?`)) {
        const csrf = ensureCsrfToken();
        fetch(`/api/admin/comments/${commentId}/moderate`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': csrf,
          },
          body: JSON.stringify({ action, reason }),
          credentials: 'same-origin',
        })
          .then((response) => response.json())
          .then((data: unknown) => {
            const ok = !!(data && typeof data === 'object' && (data as { success?: boolean }).success);
            if (ok) {
              location.reload();
            } else {
              const msg =
                data && typeof data === 'object'
                  ? ((data as { error?: { message?: string } }).error?.message || 'Unbekannter Fehler')
                  : 'Unbekannter Fehler';
              alert('Fehler bei der Moderation: ' + msg);
            }
          })
          .catch((error) => {
            console.error('Moderation error:', error);
            alert('Fehler bei der Moderation');
          });
      }
    }

    async function viewCommentDetails(commentId: string) {
      try {
        const res = await fetch(`/api/admin/comments/${commentId}`, { credentials: 'same-origin' });
        const json = (await res.json()) as { success?: boolean; data?: any };
        if (!res.ok || !json?.success) {
          alert('Konnte Details nicht laden');
          return;
        }
        const data = (json.data ?? {}) as any;
        const c = data.comment || {};
        const contentEl = document.getElementById('comment-details-content');
        if (contentEl) {
          contentEl.innerHTML = `
            <div class="space-y-2 text-sm">
              <div><span class="font-semibold">ID:</span> ${c.id || commentId}</div>
              <div><span class="font-semibold">Status:</span> ${c.status || ''}</div>
              <div><span class="font-semibold">Autor ID:</span> ${c.authorId ?? ''}</div>
              <div><span class="font-semibold">Entity:</span> ${c.entityType || ''} / ${c.entityId || ''}</div>
              <div class="mt-2"><span class="font-semibold">Inhalt:</span><div class="mt-1 whitespace-pre-wrap">${(c.content || '').toString().replace(/</g, '&lt;')}</div></div>
            </div>
          `;
        }
        const modalEl = document.getElementById('comment-details-modal');
        const dlg = modalEl as HTMLDialogElement | null;
        if (dlg && typeof (dlg as any).showModal === 'function') {
          dlg.showModal();
        } else if (modalEl && modalEl.classList) {
          modalEl.classList.remove('hidden');
        }
      } catch (e) {
        console.error(e);
        alert('Fehler beim Laden der Details');
      }
    }

    // Expose handlers globally for inline onclick usage
    (window as any).moderateComment = moderateComment;
    (window as any).viewCommentDetails = viewCommentDetails;

    // Refresh-Button Funktionalität
    document.getElementById('refresh-btn')?.addEventListener('click', () => {
      location.reload();
    });
  </script>

  <!-- Details Modal -->
  <dialog id="comment-details-modal" class="backdrop:bg-black/50 rounded-lg p-0 w-full max-w-2xl">
    <form method="dialog">
      <div class="border-b px-4 py-3 flex items-center justify-between bg-gray-50 dark:bg-gray-800">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Kommentar-Details</h3>
        <button
          class="px-3 py-1 rounded bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-gray-100"
          >Schließen</button
        >
      </div>
    </form>
    <div id="comment-details-content" class="p-4 text-gray-800 dark:text-gray-100"></div>
  </dialog>
</BaseLayout>
