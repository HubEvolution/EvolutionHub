---
import BaseLayout from '@/layouts/BaseLayout.astro';
import UserProfile from '@/components/dashboard/UserProfile.astro';
import BillingCard, { type BillingSummary } from '@/components/dashboard/BillingCard';
import NewsletterPreferencesCard from '@/components/dashboard/NewsletterPreferencesCard';
import ToolShortcutsCard from '@/components/dashboard/ToolShortcutsCard.astro';
import RecommendationsCard from '@/components/dashboard/RecommendationsCard.astro';
import AccountSettingsSection from '@/components/dashboard/AccountSettingsSection.astro';
import RecentCommentsCard from '@/components/dashboard/RecentCommentsCard';
import { getLocale } from '@/lib/i18n';
import { getI18n } from '@/utils/i18n';
import { getAllTools } from '@/lib/tools-data';

const locals = Astro.locals as any;
if (!locals.user) {
  return Astro.redirect('/login');
}

const user = locals.user;
const locale = getLocale(Astro.url.pathname);
const t = getI18n(locale);

const origin = new URL(Astro.request.url).origin;
const cookieHeader = Astro.request.headers.get('cookie') ?? '';

async function fetchApi<T>(path: string): Promise<T | null> {
  try {
    const res = await fetch(`${origin}${path}`, {
      headers: {
        cookie: cookieHeader,
      },
    });
    if (!res.ok) return null;
    const json = (await res.json()) as { data?: T } | T | null;
    if (json && typeof json === 'object' && 'data' in (json as any)) {
      return (json as { data?: T }).data ?? null;
    }
    return (json as unknown as T) ?? null;
  } catch {
    return null;
  }
}

const billingSummary = await fetchApi<BillingSummary>('/api/dashboard/billing-summary');
const recommendationsData = await fetchApi<{ tools: any[]; docs: any[] }>(
  `/api/dashboard/recommendations?locale=${locale}`
);

const toolShortcuts = [
  {
    id: 'imag-enhancer',
    name: t('pages.tools.items.Imag-Enhancer.name'),
    description: t('pages.tools.items.Imag-Enhancer.description'),
    url: '/tools/imag-enhancer/app',
  },
  {
    id: 'prompt-enhancer',
    name: t('pages.tools.items.prompt-enhancer.name'),
    description: t('pages.tools.items.prompt-enhancer.description'),
    url: '/tools/prompt-enhancer/app',
  },
  ...getAllTools(locale)
    .filter((tool) => tool.id !== 'Imag-Enhancer' && tool.id !== 'prompt-enhancer')
    .slice(0, 1)
    .map((tool) => ({
      id: tool.id,
      name: tool.name,
      description: tool.description,
      url: tool.url,
    })),
];

const billingStrings = {
  title: t('pages.dashboard.billing.title'),
  currentPlan: t('pages.dashboard.billing.currentPlan'),
  statusLabel: t('pages.dashboard.billing.statusLabel'),
  noSubscription: t('pages.dashboard.billing.noSubscription'),
  renewal: t('pages.dashboard.billing.renewal'),
  credits: t('pages.dashboard.billing.credits'),
  actions: {
    manage: t('pages.dashboard.billing.actions.manage'),
    cancel: t('pages.dashboard.billing.actions.cancel'),
    cancelled: t('pages.dashboard.billing.actions.cancelled'),
  },
  statusMap: {
    active: t('pages.dashboard.billing.statusMap.active'),
    trialing: t('pages.dashboard.billing.statusMap.trialing'),
    past_due: t('pages.dashboard.billing.statusMap.past_due'),
    canceled: t('pages.dashboard.billing.statusMap.canceled'),
    unpaid: t('pages.dashboard.billing.statusMap.unpaid'),
    incomplete: t('pages.dashboard.billing.statusMap.incomplete'),
    incomplete_expired: t('pages.dashboard.billing.statusMap.incomplete_expired'),
    paused: t('pages.dashboard.billing.statusMap.paused'),
    unknown: t('pages.dashboard.billing.statusMap.unknown'),
  } as Record<string, string>,
  planLabels: {
    free: t('pages.dashboard.profile.planLabels.free'),
    pro: t('pages.dashboard.profile.planLabels.pro'),
    premium: t('pages.dashboard.profile.planLabels.premium'),
    enterprise: t('pages.dashboard.profile.planLabels.enterprise'),
  } as Record<'free' | 'pro' | 'premium' | 'enterprise', string>,
};

const toolShortcutStrings = {
  title: t('pages.dashboard.toolShortcuts.title'),
  description: t('pages.dashboard.toolShortcuts.description'),
  open: t('pages.dashboard.toolShortcuts.open'),
};

const newsletterStrings = {
  title: t('pages.dashboard.newsletter.title'),
  subscribed: t('pages.dashboard.newsletter.subscribed'),
  unsubscribed: t('pages.dashboard.newsletter.unsubscribed'),
  unsubscribe: t('pages.dashboard.newsletter.unsubscribe'),
  resubscribe: t('pages.dashboard.newsletter.resubscribe'),
  processing: t('pages.dashboard.newsletter.processing'),
  success: t('pages.dashboard.newsletter.success'),
  error: t('pages.dashboard.newsletter.error'),
};

const recentCommentsStrings =
  locale === 'de'
    ? {
        title: 'Meine letzten Kommentare',
        empty: 'Noch keine Kommentare – entdecke unseren Blog und diskutiere mit!',
        error: 'Fehler beim Laden deiner Kommentare.',
        openBlogCta: 'Zum Blog',
      }
    : {
        title: 'My recent comments',
        empty: "You haven't commented yet — explore our blog and join the discussion!",
        error: 'Failed to load your comments.',
        openBlogCta: 'Open Blog',
      };

const recommendationStrings = {
  title: t('pages.dashboard.recommendations.title'),
  tools: t('pages.dashboard.recommendations.tools'),
  docs: t('pages.dashboard.recommendations.docs'),
  empty: t('pages.dashboard.recommendations.empty'),
};

const recommendedTools = recommendationsData?.tools ?? [];
const recommendedDocs = recommendationsData?.docs ?? [];

const initialNewsletterSubscribed = true;

const accountI18nSettings = {
  upload: {
    invalid_type: t('common.upload.invalid_type'),
    too_large: t('common.upload.too_large'),
  },
  status: {
    uploading: t('common.status.uploading'),
  },
  actions: {
    upload: t('common.actions.upload'),
  },
  success: {
    avatar_updated: t('common.success.avatar_updated'),
  },
  errors: {
    upload_failed_prefix: t('common.errors.upload_failed_prefix'),
  },
};

const baseDashboardPath =
  locale === 'de' ? '/de/dashboard' : locale === 'en' ? '/en/dashboard' : '/dashboard';
const redirectUrl = locale === 'de' ? '/de/login' : locale === 'en' ? '/en/login' : '/login';
const billingUrl = `${baseDashboardPath}#billing`;

const pricingBasePath = locale === 'de' ? '/de/pricing' : locale === 'en' ? '/en/pricing' : '/pricing';
const managePricingLink = (() => {
  try {
    const u = new URL(pricingBasePath, 'http://x');
    const cur = new URL(Astro.url);
    const currentPath = `${cur.pathname}${cur.search}`;
    if (currentPath.startsWith('/')) {
      u.searchParams.set('return_to', currentPath);
    }
    return u.pathname + u.search;
  } catch {
    return pricingBasePath;
  }
})();

const dangerStrings =
  locale === 'de'
    ? {
        title: 'Konto löschen',
        description:
          'Das Entfernen deines Kontos anonymisiert deine Daten und beendet aktive Sitzungen. Diese Aktion kann nicht rückgängig gemacht werden.',
        button: 'Konto löschen',
        close: 'Schließen',
        confirm: {
          title: 'Löschung bestätigen',
          description: 'Bist du sicher, dass du dein Konto dauerhaft löschen möchtest?',
          confirmCta: 'Jetzt löschen',
          cancelCta: 'Abbrechen',
        },
        subscription: {
          title: 'Aktives Abonnement erkannt',
          description:
            'Wir haben aktive Abonnements gefunden. Du kannst zur Abrechnung wechseln oder die Kündigung automatisch zum aktuellen Laufzeitende einplanen.',
          periodEnd: 'Verlängert sich am {date}',
          indefinite: 'Verlängert sich automatisch bis zur Kündigung',
          goToBilling: 'Zur Abrechnung wechseln',
          deleteAnyway: 'Trotzdem löschen',
          back: 'Zurück',
        },
        messages: {
          processing: 'Konto wird gelöscht…',
          success: 'Dein Konto wurde gelöscht. Du wirst abgemeldet.',
          error: 'Das Konto konnte nicht gelöscht werden. Bitte versuche es erneut.',
        },
      }
    : {
        title: 'Delete account',
        description:
          'Deleting your account anonymises data and logs you out everywhere. This action cannot be undone.',
        button: 'Delete account',
        close: 'Close',
        confirm: {
          title: 'Confirm deletion',
          description: 'Are you sure you want to permanently delete your account?',
          confirmCta: 'Delete now',
          cancelCta: 'Cancel',
        },
        subscription: {
          title: 'Active subscription detected',
          description:
            'We found active subscriptions. You can jump to billing or schedule cancellation at the current period end.',
          periodEnd: 'Renews on {date}',
          indefinite: 'Renews automatically until cancelled',
          goToBilling: 'Go to billing',
          deleteAnyway: 'Delete anyway',
          back: 'Back',
        },
        messages: {
          processing: 'Deleting account…',
          success: 'Your account was deleted successfully. You will be signed out.',
          error: 'We couldn’t delete your account. Please try again or contact support.',
        },
      };

const profileCopy =
  locale === 'de'
    ? {
        title: 'Öffentliches Profil',
        description:
          'Aktualisiere, wie du in Evolution Hub erscheinst – für Kommentare, Dashboards und Team-Arbeitsbereiche.',
        nameLabel: 'Name',
        usernameLabel: 'Benutzername',
        emailLabel: 'E-Mail',
        changeEmailHint: 'E-Mail-Änderungen erfordern eine erneute Verifizierung über den Support.',
        changeEmailCta: 'E-Mail ändern (bald verfügbar)',
        saveCta: 'Änderungen speichern',
        hybridTitle: 'Passwortlos per Design',
        hybridDescription:
          'Anmeldung erfolgt über Magic Links und OAuth-Anbieter – keine Passwörter, kein Reset-Stress.',
        supportTitle: 'Hilfe benötigt?',
        supportDescription:
          'Das Auth-Playbook erklärt Sessions, Gerätevertrauen und Recovery-Schritte im Detail.',
        supportCta: 'Guide öffnen',
        supportHref: '/docs/architecture/auth-architecture',
      }
    : {
        title: 'Public profile',
        description:
          'Control how your identity appears across Evolution Hub workspaces and automations.',
        nameLabel: 'Name',
        usernameLabel: 'Username',
        emailLabel: 'Email',
        changeEmailHint: 'Email changes require a re-verification workflow handled by support.',
        changeEmailCta: 'Change email (coming soon)',
        saveCta: 'Save changes',
        hybridTitle: 'Passwordless by design',
        hybridDescription:
          'Authentication relies on secure magic links and OAuth providers. Nothing to rotate or forget.',
        supportTitle: 'Need help?',
        supportDescription:
          'Review the authentication playbook for session management, recovery, and device trust.',
        supportCta: 'Open guide',
        supportHref: '/docs/architecture/auth-architecture',
      };
---

<BaseLayout title={t('pages.dashboard.title') ?? 'Dashboard'}>
  <!-- Futuristic gradient background -->
  <div class="relative min-h-screen overflow-hidden">
    <div
      class="absolute inset-0 -z-10 bg-gradient-to-br from-slate-950 via-indigo-950/40 to-violet-950/30 dark:from-slate-950 dark:via-purple-950/30 dark:to-cyan-950/20"
    >
    </div>
    <div
      class="absolute inset-0 -z-10 bg-[radial-gradient(ellipse_at_top_right,_var(--tw-gradient-stops))] from-pink-500/10 via-transparent to-transparent"
    >
    </div>

    <div class="container mx-auto p-4 lg:p-6">
      <!-- Modern CSS Grid Layout: responsive columns -->
      <div class="grid grid-cols-1 gap-4 lg:grid-cols-2 lg:gap-6 xl:grid-cols-3">
        <!-- User Profile Card -->
        <UserProfile user={user} />

        <!-- Account Settings - Spans 2 columns on XL -->
        <div class="xl:col-span-2">
          <AccountSettingsSection
            user={user}
            planLabels={billingStrings.planLabels}
            billingUrl={billingUrl}
            redirectUrl={redirectUrl}
            dangerStrings={dangerStrings}
            profileCopy={profileCopy}
            i18nSettings={accountI18nSettings}
          />
        </div>

        <!-- Pulse Card - Compact callout -->
        <div
          class="group relative overflow-hidden rounded-xl border border-indigo-500/20 bg-gradient-to-br from-indigo-950/50 via-slate-900/60 to-violet-950/50 p-5 shadow-xl backdrop-blur-sm transition-all hover:border-indigo-400/30 hover:shadow-indigo-500/20"
        >
          <div
            class="absolute inset-0 -z-10 bg-gradient-to-br from-indigo-500/5 to-transparent opacity-0 transition-opacity group-hover:opacity-100"
          >
          </div>
          <h3 class="text-xs font-bold uppercase tracking-wider text-indigo-300/90">Pulse</h3>
          <p class="mt-2 text-sm leading-relaxed text-slate-300/80">
            {
              t('pages.dashboard.profile.pulse', {
                default:
                  'Your workspace runs completely passwordless – magic links sync straight to your inbox and OAuth keeps identities verified.',
              })
            }
          </p>
        </div>

        <!-- Newsletter Card -->
        <NewsletterPreferencesCard
          client:load
          email={user.email}
          initiallySubscribed={initialNewsletterSubscribed}
          strings={newsletterStrings}
        />

        <!-- Billing Card -->
        <div
          class="group relative overflow-hidden rounded-xl border border-white/10 bg-white/5 p-4 shadow-lg backdrop-blur-md transition-all hover:border-white/20 hover:shadow-xl dark:bg-slate-900/40"
        >
          <BillingCard client:load summary={billingSummary} strings={billingStrings} manageLink={managePricingLink} />
        </div>

        <!-- Tool Shortcuts -->
        <div
          class="group relative overflow-hidden rounded-xl border border-cyan-500/20 bg-gradient-to-br from-cyan-950/40 via-slate-900/50 to-blue-950/40 p-4 shadow-lg backdrop-blur-sm transition-all hover:border-cyan-400/30 hover:shadow-cyan-500/20"
        >
          <ToolShortcutsCard tools={toolShortcuts} strings={toolShortcutStrings} />
        </div>

        <!-- Recent Comments -->
        <div
          class="group relative overflow-hidden rounded-xl border border-emerald-500/20 bg-gradient-to-br from-emerald-950/40 via-slate-900/50 to-teal-950/40 p-4 shadow-lg backdrop-blur-sm transition-all hover:border-emerald-400/30 hover:shadow-emerald-500/20"
        >
          <RecentCommentsCard client:load strings={recentCommentsStrings} />
        </div>

        <!-- Recommendations - Full width on smaller screens -->
        <div class="lg:col-span-2 xl:col-span-3">
          <div
            class="group relative overflow-hidden rounded-xl border border-violet-500/20 bg-gradient-to-br from-violet-950/40 via-slate-900/50 to-fuchsia-950/30 p-5 shadow-xl backdrop-blur-sm transition-all hover:border-violet-400/30 hover:shadow-violet-500/20"
          >
            <RecommendationsCard
              tools={recommendedTools}
              docs={recommendedDocs}
              strings={recommendationStrings}
            />
          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>
