{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [
      {
        "startedDateTime": "2025-10-26T18:08:58.790Z",
        "id": "page_2",
        "title": "https://hub-evolution.com/admin/",
        "pageTimings": {
          "onContentLoad": 78931.84199999087,
          "onLoad": 78997.40600003861
        }
      }
    ],
    "entries": [
      {
        "_connectionId": "175563",
        "_initiator": {
          "type": "other"
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "connection": "443",
        "pageref": "page_2",
        "request": {
          "method": "GET",
          "url": "https://hub-evolution.com/admin/",
          "httpVersion": "h3",
          "headers": [
            {
              "name": ":authority",
              "value": "hub-evolution.com"
            },
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":path",
              "value": "/admin/"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": "accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "accept-language",
              "value": "de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7"
            },
            {
              "name": "cache-control",
              "value": "no-cache"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "priority",
              "value": "u=0, i"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            },
            {
              "name": "sec-fetch-dest",
              "value": "document"
            },
            {
              "name": "sec-fetch-mode",
              "value": "navigate"
            },
            {
              "name": "sec-fetch-site",
              "value": "none"
            },
            {
              "name": "sec-fetch-user",
              "value": "?1"
            },
            {
              "name": "upgrade-insecure-requests",
              "value": "1"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            },
            {
              "name": "cache-control",
              "value": "no-store, no-cache, must-revalidate"
            },
            {
              "name": "cf-ray",
              "value": "994be6f03da0f954-DUS"
            },
            {
              "name": "content-encoding",
              "value": "br"
            },
            {
              "name": "content-language",
              "value": "de"
            },
            {
              "name": "content-security-policy",
              "value": "default-src 'self'; script-src 'self' 'nonce-6ZUjFOylMvpBYuGlrhL6Ow==' https://cdn.jsdelivr.net https://www.googletagmanager.com https://plausible.io https://challenges.cloudflare.com 'sha256-QzWFZi+FLIx23tnm9SBU4aEgx4x8DsuASP07mfqol/c=' 'sha256-U7a72oKuFFz8D7GUHLA1NZ0ciymHmDOc9T9aVDg2rWU='; script-src-elem 'self' 'nonce-6ZUjFOylMvpBYuGlrhL6Ow==' https://cdn.jsdelivr.net https://www.googletagmanager.com https://plausible.io https://challenges.cloudflare.com 'sha256-QzWFZi+FLIx23tnm9SBU4aEgx4x8DsuASP07mfqol/c=' 'sha256-U7a72oKuFFz8D7GUHLA1NZ0ciymHmDOc9T9aVDg2rWU='; connect-src 'self' https: wss:; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://unpkg.com https://cdnjs.cloudflare.com https://cdn.jsdelivr.net; img-src 'self' data: blob: https:; font-src 'self' https://fonts.gstatic.com; frame-src 'self' https://challenges.cloudflare.com; frame-ancestors 'self'; object-src 'none'; base-uri 'self'; report-uri /api/csp-report"
            },
            {
              "name": "content-type",
              "value": "text/html"
            },
            {
              "name": "cross-origin-opener-policy",
              "value": "same-origin"
            },
            {
              "name": "date",
              "value": "Sun, 26 Oct 2025 18:10:16 GMT"
            },
            {
              "name": "expires",
              "value": "0"
            },
            {
              "name": "nel",
              "value": "{\"report_to\":\"cf-nel\",\"success_fraction\":0.0,\"max_age\":604800}"
            },
            {
              "name": "permissions-policy",
              "value": "camera=(), microphone=(), geolocation=(), interest-cohort=()"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "priority",
              "value": "u=0,i"
            },
            {
              "name": "referrer-policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "name": "report-to",
              "value": "{\"group\":\"cf-nel\",\"max_age\":604800,\"endpoints\":[{\"url\":\"https://a.nel.cloudflare.com/report/v4?s=jOeLvWmrIog1g1ypEBm5z9Au0GuiHoFj6JMt1DwjGG37ZEOhxX6DliNdkK%2FdhgW00n%2Bd6WITpcq4FuQ4fB1wvq%2F%2F24idhr5HVL5acdkQB0PQ\"}]}"
            },
            {
              "name": "server",
              "value": "cloudflare"
            },
            {
              "name": "server-timing",
              "value": "session;dur=186, render;dur=77802, total;dur=77988"
            },
            {
              "name": "server-timing",
              "value": "cfEdge;dur=78001,cfOrigin;dur=0"
            },
            {
              "name": "server-timing",
              "value": "cfExtPri"
            },
            {
              "name": "speculation-rules",
              "value": "\"/cdn-cgi/speculation\""
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000; includeSubDomains; preload"
            },
            {
              "name": "vary",
              "value": "Cookie, Accept-Language, accept-encoding"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "x-frame-options",
              "value": "DENY"
            }
          ],
          "cookies": [],
          "content": {
            "size": 104388,
            "mimeType": "text/html",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 27585,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "104.21.88.175",
        "startedDateTime": "2025-10-26T18:08:58.783Z",
        "time": 78364.96100003595,
        "timings": {
          "blocked": 9.91299997922778,
          "dns": 67.378,
          "ssl": 32.086,
          "connect": 99.643,
          "send": 0.6290000000000049,
          "wait": 78168.50100005498,
          "receive": 18.897000001743436,
          "_blocked_queueing": 6.020999979227781,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      }
    ]
  }
}